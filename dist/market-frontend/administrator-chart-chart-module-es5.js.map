{"version":3,"sources":["node_modules/chart.js/dist/chart.esm.js","node_modules/chart.js/dist/chunks/helpers.segment.js","src/app/administrator/chart/chart/chart.component.html","src/app/administrator/chart/chart-routing.module.ts","src/app/administrator/chart/chart.module.ts","src/app/administrator/chart/chart/chart.component.scss","src/app/administrator/chart/chart/chart.component.ts"],"names":[],"mappings":"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AA,CAAA,GAAA,IAAA,MAAA;AACA,UAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,EAAA,CAAA,GAAA,OAAA;AACA,UAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,EAAA,CAAA,GAAA,OAAA;AACA,UAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,EAAA,CAAA,GAAA,OAAA;AACA,UAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,EAAA,CAAA,GAAA,OAAA;AACA;;AACA,aAAA,MAAA;AACA,UAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,MAAA;AACA,UAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,MAAA;AACA,UAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,EAAA,CAAA,GAAA,OAAA;AACA,UAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,EAAA,CAAA,GAAA,OAAA;AACA,UAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,EAAA,CAAA,GAAA,OAAA;AACA,UAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,EAAA,CAAA,GAAA,OAAA;AACA,UAAA,GAAA,IAAA,UAAA;AACA,UAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,MAAA;AACA,UAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,MAAA;AACA,UAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,EAAA,CAAA,GAAA,OAAA;AACA,UAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,EAAA,CAAA,GAAA,OAAA;AACA,UAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,EAAA,CAAA,GAAA,OAAA;AACA,UAAA,GAAA,CAAA,MAAA,CAAA,CAAA,GAAA,OAAA,EAAA,CAAA,GAAA,OAAA;AACA;;AACA,aAAA,MAAA;AACA,UAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,MAAA;AACA,UAAA,OAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,MAAA;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","sourcesContent":["/*!\n * Chart.js v3.6.2\n * https://www.chartjs.org\n * (c) 2021 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, d as defaults, i as isObject, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as createContext, j as defined, s as sign, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as isNumber, w as _limitValue, x as _lookupByKey, y as getRelativePosition$1, z as _isPointInArea, A as _rlookupByKey, B as toPadding, C as each, D as getMaximumSize, E as _getParentNode, F as readUsedSize, G as throttled, I as supportsEventListenerOptions, J as _isDomSupported, K as log10, L as _factorize, M as finiteOrDefault, N as callback, O as _addGrace, Q as toDegrees, R as _measureText, S as _int16Range, U as _alignPixel, V as clipArea, W as renderText, X as unclipArea, Y as toFont, Z as _toLeftRightCenter, $ as _alignStartEnd, a0 as overrides, a1 as merge, a2 as _capitalize, a3 as descriptors, a4 as isFunction, a5 as _attachContext, a6 as _createResolver, a7 as _descriptors, a8 as mergeIf, a9 as uid, aa as debounce, ab as retinaScale, ac as clearCanvas, ad as setsEqual, ae as _elementsEqual, af as getAngleFromPoint, ag as _isBetween, ah as _readValueToProps, ai as _updateBezierControlPoints, aj as _computeSegments, ak as _boundSegments, al as _steppedInterpolation, am as _bezierInterpolation, an as _pointInLine, ao as _steppedLineTo, ap as _bezierCurveTo, aq as drawPoint, ar as addRoundedRectPath, as as toTRBL, at as toTRBLCorners, au as _boundSegment, av as _normalizeAngle, aw as getRtlAdapter, ax as overrideTextDirection, ay as _textX, az as restoreTextDirection, aA as noop, aB as distanceBetweenPoints, aC as _setMinAndMaxByKey, aD as niceNum, aE as almostWhole, aF as almostEquals, aG as _decimalPlaces, aH as _longestText, aI as _filterBetween, aJ as _lookup } from './chunks/helpers.segment.js';\nexport { d as defaults } from './chunks/helpers.segment.js';\n\nclass Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n  _update(date = Date.now()) {\n    let remaining = 0;\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n      for (; i >= 0; --i) {\n        item = items[i];\n        if (item._active) {\n          if (item._total > anims.duration) {\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n      remaining += items.length;\n    });\n    this._lastDate = date;\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\nvar animator = new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color(from, to, factor) {\n    const c0 = color(from || transparent);\n    const c1 = c0.valid && color(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nclass Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  active() {\n    return this._active;\n  }\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n  cancel() {\n    if (this._active) {\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n    this._active = from !== to && (loop || (elapsed < duration));\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n    this._target[prop] = this._fn(from, to, factor);\n  }\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n\nconst numbers = ['x', 'y', 'borderWidth', 'radius', 'tension'];\nconst colors = ['color', 'borderColor', 'backgroundColor'];\ndefaults.set('animation', {\n  delay: undefined,\n  duration: 1000,\n  easing: 'easeOutQuart',\n  fn: undefined,\n  from: undefined,\n  loop: undefined,\n  to: undefined,\n  type: undefined,\n});\nconst animationOptions = Object.keys(defaults.animation);\ndefaults.describe('animation', {\n  _fallback: false,\n  _indexable: false,\n  _scriptable: (name) => name !== 'onProgress' && name !== 'onComplete' && name !== 'fn',\n});\ndefaults.set('animations', {\n  colors: {\n    type: 'color',\n    properties: colors\n  },\n  numbers: {\n    type: 'number',\n    properties: numbers\n  },\n});\ndefaults.describe('animations', {\n  _fallback: 'animation',\n});\ndefaults.set('transitions', {\n  active: {\n    animation: {\n      duration: 400\n    }\n  },\n  resize: {\n    animation: {\n      duration: 0\n    }\n  },\n  show: {\n    animations: {\n      colors: {\n        from: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        duration: 0\n      },\n    }\n  },\n  hide: {\n    animations: {\n      colors: {\n        to: 'transparent'\n      },\n      visible: {\n        type: 'boolean',\n        easing: 'linear',\n        fn: v => v | 0\n      },\n    }\n  }\n});\nclass Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n    const animatedProps = this._properties;\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n      });\n    }\n    return animations;\n  }\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n      if (animation) {\n        if (cfg && animation.active()) {\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        target[prop] = value;\n        continue;\n      }\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n  update(target, values) {\n    if (this._properties.size === 0) {\n      Object.assign(target, values);\n      return;\n    }\n    const animations = this._createAnimations(target, values);\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  let t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {});\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n  }\n}\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\nclass DatasetController {\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.initialize();\n  }\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n  }\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n  reset() {\n    this._update('reset');\n  }\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        unlistenArrayEvents(_data, this);\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n  addElements() {\n    const meta = this._cachedMeta;\n    this._dataCheck();\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n    this._dataCheck();\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n    this._resyncElements(resetNewElements);\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        break;\n      }\n    }\n    if (sorted) {\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isNumberFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n  getMaxOverflow() {\n    return false;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n  update(mode) {}\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    let i;\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    const context = () => this.getContext(index, active);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n    if (values.$shared) {\n      values.$shared = sharing;\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n    return values;\n  }\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n    if (count) {\n      this.parse(0, count);\n    }\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n  updateElements(element, start, count, mode) {}\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\nDatasetController.defaults = {};\nDatasetController.prototype.datasetElementType = null;\nDatasetController.prototype.dataElementType = null;\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\nclass BarController extends DatasetController {\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n  getMaxOverflow() {\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n  _getStacks(last, dataIndex) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const metasets = iScale.getMatchingVisibleMetas(this._type);\n    const stacked = iScale.options.stacked;\n    const ilen = metasets.length;\n    const stacks = [];\n    let i, item;\n    for (i = 0; i < ilen; ++i) {\n      item = metasets[i];\n      if (!item.controller.options.grouped) {\n        continue;\n      }\n      if (typeof dataIndex !== 'undefined') {\n        const val = item.controller.getParsed(dataIndex)[\n          item.controller._cachedMeta.vScale.axis\n        ];\n        if (isNullOrUndef(val) || isNaN(val)) {\n          continue;\n        }\n      }\n      if (stacked === false || stacks.indexOf(item.stack) === -1 ||\n\t\t\t\t(stacked === undefined && item.stack === undefined)) {\n        stacks.push(item.stack);\n      }\n      if (item.index === last) {\n        break;\n      }\n    }\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n    return stacks;\n  }\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1;\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      head = base;\n    }\n    size = head - base;\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      head = base + size;\n    }\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n}\nBarController.id = 'bar';\nBarController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n};\nBarController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true,\n    }\n  }\n};\n\nclass BubbleController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n    return {\n      label: meta.label,\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n  update(mode) {\n    const points = this._cachedMeta.data;\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n      if (includeOptions) {\n        properties.options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n      this.updateElement(point, i, properties, mode);\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n    return values;\n  }\n}\nBubbleController.id = 'bubble';\nBubbleController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n};\nBubbleController.overrides = {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        }\n      }\n    }\n  }\n};\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\nclass DoughnutController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n  linkScales() {}\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n    meta.total = this.calculateTotal();\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    let startAngle = this._getRotation();\n    let i;\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n      this.updateElement(arc, i, properties, mode);\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n    return total;\n  }\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n    if (!arcs) {\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n    if (!arcs) {\n      return 0;\n    }\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n  getMaxOffset(arcs) {\n    let max = 0;\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n    return ringWeightOffset;\n  }\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\nDoughnutController.id = 'doughnut';\nDoughnutController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    },\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r',\n};\nDoughnutController.descriptors = {\n  _scriptable: (name) => name !== 'spacing',\n  _indexable: (name) => name !== 'spacing',\n};\nDoughnutController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {labels: {pointStyle}} = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(tooltipItem) {\n          let dataLabel = tooltipItem.label;\n          const value = ': ' + tooltipItem.formattedValue;\n          if (isArray(dataLabel)) {\n            dataLabel = dataLabel.slice();\n            dataLabel[0] += value;\n          } else {\n            dataLabel += value;\n          }\n          return dataLabel;\n        }\n      }\n    }\n  }\n};\n\nclass LineController extends DatasetController {\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n    this._drawStart = start;\n    this._drawCount = count;\n    if (scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n    this.updateElements(points, start, count, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n      prevParsed = parsed;\n    }\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\nLineController.id = 'line';\nLineController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false,\n};\nLineController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n    },\n    _value_: {\n      type: 'linear',\n    },\n  }\n};\nfunction getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n  const pointCount = points.length;\n  let start = 0;\n  let count = pointCount;\n  if (meta._sorted) {\n    const {iScale, _parsed} = meta;\n    const axis = iScale.axis;\n    const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n    if (minDefined) {\n      start = _limitValue(Math.min(\n        _lookupByKey(_parsed, iScale.axis, min).lo,\n        animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo),\n      0, pointCount - 1);\n    }\n    if (maxDefined) {\n      count = _limitValue(Math.max(\n        _lookupByKey(_parsed, iScale.axis, max).hi + 1,\n        animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max)).hi + 1),\n      start, pointCount) - start;\n    } else {\n      count = pointCount - start;\n    }\n  }\n  return {start, count};\n}\nfunction scaleRangesChanged(meta) {\n  const {xScale, yScale, _scaleRanges} = meta;\n  const newRanges = {\n    xmin: xScale.min,\n    xmax: xScale.max,\n    ymin: yScale.min,\n    ymax: yScale.max\n  };\n  if (!_scaleRanges) {\n    meta._scaleRanges = newRanges;\n    return true;\n  }\n  const changed = _scaleRanges.xmin !== xScale.min\n\t\t|| _scaleRanges.xmax !== xScale.max\n\t\t|| _scaleRanges.ymin !== yScale.min\n\t\t|| _scaleRanges.ymax !== yScale.max;\n  Object.assign(_scaleRanges, newRanges);\n  return changed;\n}\n\nclass PolarAreaController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const dataset = this.getDataset();\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n    const defaultAngle = 360 / this.countVisibleElements();\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(dataset.data[i]) : 0;\n      angle = endAngle;\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n  countVisibleElements() {\n    const dataset = this.getDataset();\n    const meta = this._cachedMeta;\n    let count = 0;\n    meta.data.forEach((element, index) => {\n      if (!isNaN(dataset.data[index]) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n    return count;\n  }\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\nPolarAreaController.id = 'polarArea';\nPolarAreaController.defaults = {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    },\n  },\n  indexAxis: 'r',\n  startAngle: 0,\n};\nPolarAreaController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels(chart) {\n          const data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            const {labels: {pointStyle}} = chart.legend.options;\n            return data.labels.map((label, i) => {\n              const meta = chart.getDatasetMeta(0);\n              const style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    },\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(context) {\n          return context.chart.data.labels[context.dataIndex] + ': ' + context.formattedValue;\n        }\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n};\n\nclass PieController extends DoughnutController {\n}\nPieController.id = 'pie';\nPieController.defaults = {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n};\n\nclass RadarController extends DatasetController {\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n    line.points = points;\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n      this.updateElement(line, undefined, properties, mode);\n    }\n    this.updateElements(points, 0, points.length, mode);\n  }\n  updateElements(points, start, count, mode) {\n    const dataset = this.getDataset();\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, dataset.data[i]);\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\nRadarController.id = 'radar';\nRadarController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  },\n};\nRadarController.overrides = {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear',\n    }\n  }\n};\n\nclass ScatterController extends LineController {\n}\nScatterController.id = 'scatter';\nScatterController.defaults = {\n  showLine: false,\n  fill: false\n};\nScatterController.overrides = {\n  interaction: {\n    mode: 'point'\n  },\n  plugins: {\n    tooltip: {\n      callbacks: {\n        title() {\n          return '';\n        },\n        label(item) {\n          return '(' + item.label + ', ' + item.formattedValue + ')';\n        }\n      }\n    }\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n};\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPolarAreaController: PolarAreaController,\nPieController: PieController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\nclass DateAdapter {\n  constructor(options) {\n    this.options = options || {};\n  }\n  formats() {\n    return abstract();\n  }\n  parse(value, format) {\n    return abstract();\n  }\n  format(timestamp, format) {\n    return abstract();\n  }\n  add(timestamp, amount, unit) {\n    return abstract();\n  }\n  diff(a, b, unit) {\n    return abstract();\n  }\n  startOf(timestamp, unit, weekday) {\n    return abstract();\n  }\n  endOf(timestamp, unit) {\n    return abstract();\n  }\n}\nDateAdapter.override = function(members) {\n  Object.assign(DateAdapter.prototype, members);\n};\nvar adapters = {\n  _date: DateAdapter\n};\n\nfunction getRelativePosition(e, chart) {\n  if ('native' in e) {\n    return {\n      x: e.x,\n      y: e.y\n    };\n  }\n  return getRelativePosition$1(e, chart);\n}\nfunction evaluateAllVisibleItems(chart, handler) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  let index, data, element;\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    ({index, data} = metasets[i]);\n    for (let j = 0, jlen = data.length; j < jlen; ++j) {\n      element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  return {lo: 0, hi: data.length - 1};\n}\nfunction optimizedEvaluateItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition) {\n  const items = [];\n  if (!_isPointInArea(position, chart.chartArea, chart._minPadding)) {\n    return items;\n  }\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n  optimizedEvaluateItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition) {\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n  let items = [];\n  if (!_isPointInArea(position, chart.chartArea, chart._minPadding)) {\n    return items;\n  }\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (intersect && !element.inRange(position.x, position.y, useFinalPosition)) {\n      return;\n    }\n    const center = element.getCenterPoint(useFinalPosition);\n    if (!_isPointInArea(center, chart.chartArea, chart._minPadding) && !element.inRange(position.x, position.y, useFinalPosition)) {\n      return;\n    }\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n  optimizedEvaluateItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getAxisItems(chart, e, options, useFinalPosition) {\n  const position = getRelativePosition(e, chart);\n  const items = [];\n  const axis = options.axis;\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n  evaluateAllVisibleItems(chart, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      intersectsItem = true;\n    }\n  });\n  if (options.intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  modes: {\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'x';\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition)\n        : getNearestItems(chart, position, axis, false, useFinalPosition);\n      const elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n      return elements;\n    },\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition) :\n        getNearestItems(chart, position, axis, false, useFinalPosition);\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n      return items;\n    },\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      return getIntersectItems(chart, position, axis, useFinalPosition);\n    },\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition);\n    },\n    x(chart, e, options, useFinalPosition) {\n      return getAxisItems(chart, e, {axis: 'x', intersect: options.intersect}, useFinalPosition);\n    },\n    y(chart, e, options, useFinalPosition) {\n      return getAxisItems(chart, e, {axis: 'y', intersect: options.intersect}, useFinalPosition);\n    }\n  }\n};\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\ndefaults.set('layout', {\n  autoPadding: true,\n  padding: {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0\n  }\n});\nvar layouts = {\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n\nclass BasePlatform {\n  acquireContext(canvas, aspectRatio) {}\n  releaseContext(context) {\n    return false;\n  }\n  addEventListener(chart, type, listener) {}\n  removeEventListener(chart, type, listener) {}\n  getDevicePixelRatio() {\n    return 1;\n  }\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n  isAttached(canvas) {\n    return true;\n  }\n  updateConfig(config) {\n  }\n}\n\nclass BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n\nconst EXPANDO_KEY = '$chartjs';\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nconst isNullOrEmpty = value => value === null || value === '';\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition$1(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart, (args) => {\n    const event = args[0];\n    return [event, event.offsetX, event.offsetY];\n  });\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nclass DomPlatform extends BasePlatform {\n  acquireContext(canvas, aspectRatio) {\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n    if (context && context.canvas === canvas) {\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n    return null;\n  }\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n    canvas.width = canvas.width;\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n  addEventListener(chart, type, listener) {\n    this.removeEventListener(chart, type);\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n    if (!proxy) {\n      return;\n    }\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nclass Element {\n  constructor() {\n    this.x = undefined;\n    this.y = undefined;\n    this.active = false;\n    this.options = undefined;\n    this.$animations = undefined;\n  }\n  tooltipPosition(useFinalPosition) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n  getProps(props, final) {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      return this;\n    }\n    const ret = {};\n    props.forEach(prop => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n    });\n    return ret;\n  }\n}\nElement.defaults = {};\nElement.defaultRoutes = undefined;\n\nconst formatters = {\n  values(value) {\n    return isArray(value) ? value : '' + value;\n  },\n  numeric(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const locale = this.chart.options.locale;\n    let notation;\n    let delta = tickValue;\n    if (ticks.length > 1) {\n      const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n      if (maxTick < 1e-4 || maxTick > 1e+15) {\n        notation = 'scientific';\n      }\n      delta = calculateDelta(tickValue, ticks);\n    }\n    const logDelta = log10(Math.abs(delta));\n    const numDecimal = Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n    const options = {notation, minimumFractionDigits: numDecimal, maximumFractionDigits: numDecimal};\n    Object.assign(options, this.options.ticks.format);\n    return formatNumber(tickValue, locale, options);\n  },\n  logarithmic(tickValue, index, ticks) {\n    if (tickValue === 0) {\n      return '0';\n    }\n    const remain = tickValue / (Math.pow(10, Math.floor(log10(tickValue))));\n    if (remain === 1 || remain === 2 || remain === 5) {\n      return formatters.numeric.call(this, tickValue, index, ticks);\n    }\n    return '';\n  }\n};\nfunction calculateDelta(tickValue, ticks) {\n  let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n  if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n    delta = tickValue - Math.floor(tickValue);\n  }\n  return delta;\n}\nvar Ticks = {formatters};\n\ndefaults.set('scale', {\n  display: true,\n  offset: false,\n  reverse: false,\n  beginAtZero: false,\n  bounds: 'ticks',\n  grace: 0,\n  grid: {\n    display: true,\n    lineWidth: 1,\n    drawBorder: true,\n    drawOnChartArea: true,\n    drawTicks: true,\n    tickLength: 8,\n    tickWidth: (_ctx, options) => options.lineWidth,\n    tickColor: (_ctx, options) => options.color,\n    offset: false,\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderWidth: 1\n  },\n  title: {\n    display: false,\n    text: '',\n    padding: {\n      top: 4,\n      bottom: 4\n    }\n  },\n  ticks: {\n    minRotation: 0,\n    maxRotation: 50,\n    mirror: false,\n    textStrokeWidth: 0,\n    textStrokeColor: '',\n    padding: 3,\n    display: true,\n    autoSkip: true,\n    autoSkipPadding: 3,\n    labelOffset: 0,\n    callback: Ticks.formatters.values,\n    minor: {},\n    major: {},\n    align: 'center',\n    crossAlign: 'near',\n    showLabelBackdrop: false,\n    backdropColor: 'rgba(255, 255, 255, 0.75)',\n    backdropPadding: 2,\n  }\n});\ndefaults.route('scale.ticks', 'color', '', 'color');\ndefaults.route('scale.grid', 'color', '', 'borderColor');\ndefaults.route('scale.grid', 'borderColor', '', 'borderColor');\ndefaults.route('scale.title', 'color', '', 'color');\ndefaults.describe('scale', {\n  _fallback: false,\n  _scriptable: (name) => !name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n  _indexable: (name) => name !== 'borderDash' && name !== 'tickBorderDash',\n});\ndefaults.describe('scales', {\n  _fallback: 'scale',\n});\ndefaults.describe('scale.ticks', {\n  _scriptable: (name) => name !== 'backdropPadding' && name !== 'callback',\n  _indexable: (name) => name !== 'backdropPadding',\n});\n\nfunction autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const ticksLimit = tickOpts.maxTicksLimit || determineMaxTicks(scale);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6;\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n  return (lines * font.lineHeight) + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\nclass Scale extends Element {\n  constructor(cfg) {\n    super();\n    this.id = cfg.id;\n    this.type = cfg.type;\n    this.options = undefined;\n    this.ctx = cfg.ctx;\n    this.chart = cfg.chart;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this.maxWidth = undefined;\n    this.maxHeight = undefined;\n    this.paddingTop = undefined;\n    this.paddingBottom = undefined;\n    this.paddingLeft = undefined;\n    this.paddingRight = undefined;\n    this.axis = undefined;\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    this.ticks = [];\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    this._startPixel = undefined;\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n  init(options) {\n    this.options = options.setContext(this.getContext());\n    this.axis = options.axis;\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n  parse(raw, index) {\n    return raw;\n  }\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isNumberFinite(_userMin),\n      maxDefined: isNumberFinite(_userMax)\n    };\n  }\n  getMinMax(canStack) {\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n  getTicks() {\n    return this.ticks;\n  }\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n  beforeUpdate() {\n    callback(this.options.beforeUpdate, [this]);\n  }\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n    this.beforeUpdate();\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n    this.beforeBuildTicks();\n    this.ticks = this.buildTicks() || [];\n    this.afterBuildTicks();\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n    this.configure();\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation();\n    this.afterCalculateLabelRotation();\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n    }\n    if (samplingEnabled) {\n      this._convertTicksToLabels(this.ticks);\n    }\n    this.beforeFit();\n    this.fit();\n    this.afterFit();\n    this.afterUpdate();\n  }\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n  afterUpdate() {\n    callback(this.options.afterUpdate, [this]);\n  }\n  beforeSetDimensions() {\n    callback(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = 0;\n      this.bottom = this.height;\n    }\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    callback(this.options.afterSetDimensions, [this]);\n  }\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    callback(this.options[name], [this]);\n  }\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n  beforeTickToLabelConversion() {\n    callback(this.options.beforeTickToLabelConversion, [this]);\n  }\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    callback(this.options.afterTickToLabelConversion, [this]);\n  }\n  beforeCalculateLabelRotation() {\n    callback(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = this.ticks.length;\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    callback(this.options.afterCalculateLabelRotation, [this]);\n  }\n  beforeFit() {\n    callback(this.options.beforeFit, [this]);\n  }\n  fit() {\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight;\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n        if (isHorizontal) {\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n    this._handleMargins();\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n  afterFit() {\n    callback(this.options.afterFit, [this]);\n  }\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  isFullSize() {\n    return this.options.fullSize;\n  }\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n    this.generateTickLabels(ticks);\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n    this.afterTickToLabelConversion();\n  }\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length);\n    }\n    return labelSizes;\n  }\n  _computeLabelSizes(ticks, length) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n    for (i = 0; i < length; ++i) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = label[j];\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n  getLabelForValue(value) {\n    return value;\n  }\n  getPixelForValue(value, index) {\n    return NaN;\n  }\n  getValueForPixel(pixel) {}\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n  getBaseValue() {\n    const {min, max} = this;\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n  getContext(index) {\n    const ticks = this.ticks || [];\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n  _isVisible() {\n    const display = this.options.display;\n    if (display !== 'auto') {\n      return !!display;\n    }\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n    const borderOpts = grid.setContext(this.getContext());\n    const axisWidth = borderOpts.drawBorder ? borderOpts.borderWidth : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const optsAtIndex = grid.setContext(this.getContext(i));\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = grid.borderDash || [];\n      const borderDashOffset = optsAtIndex.borderDashOffset;\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n      lineValue = getPixelForGridLine(this, i, offset);\n      if (lineValue === undefined) {\n        continue;\n      }\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n    return items;\n  }\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      if (isHorizontal) {\n        x = pixel;\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n      let backdrop;\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n        let top = y + textOffset - labelPadding.top;\n        let left = x - labelPadding.left;\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        }\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        }\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n          color: optsAtIndex.backdropColor,\n        };\n      }\n      items.push({\n        rotation,\n        label,\n        font,\n        color,\n        strokeColor,\n        strokeWidth,\n        textOffset,\n        textAlign,\n        textBaseline,\n        translation: [x, y],\n        backdrop,\n      });\n    }\n    return items;\n  }\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n    let align = 'center';\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    }\n    return align;\n  }\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n    let textAlign;\n    let x;\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n    return {textAlign, x};\n  }\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n    const chart = this.chart;\n    const position = this.options.position;\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n  drawBorder() {\n    const {chart, ctx, options: {grid}} = this;\n    const borderOpts = grid.setContext(this.getContext());\n    const axisWidth = grid.drawBorder ? borderOpts.borderWidth : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.borderWidth;\n    ctx.strokeStyle = borderOpts.borderColor;\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n    ctx.restore();\n  }\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n    if (!optionTicks.display) {\n      return;\n    }\n    const ctx = this.ctx;\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    let i, ilen;\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      const item = items[i];\n      const tickFont = item.font;\n      const label = item.label;\n      if (item.backdrop) {\n        ctx.fillStyle = item.backdrop.color;\n        ctx.fillRect(item.backdrop.left, item.backdrop.top, item.backdrop.width, item.backdrop.height);\n      }\n      let y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, item);\n    }\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n    if (!title.display) {\n      return;\n    }\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: gz + 1,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n\nclass TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n    if (isIChartComponent(proto)) {\n      parentScope = this.register(proto);\n    }\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n    if (id in items) {\n      return scope;\n    }\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n    return scope;\n  }\n  get(id) {\n    return this.items[id];\n  }\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n    if (id in items) {\n      delete items[id];\n    }\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\nfunction registerDefaults(item, scope, parentScope) {\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  add(...args) {\n    this._each('register', args);\n  }\n  remove(...args) {\n    this._each('unregister', args);\n  }\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        each(arg, item => {\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    callback(component['before' + camelMethod], [], component);\n    registry[method](component);\n    callback(component['after' + camelMethod], [], component);\n  }\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    return this.plugins;\n  }\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n}\nvar registry = new Registry();\n\nclass PluginService {\n  constructor() {\n    this._init = [];\n  }\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n    if (hook === 'destroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n    return true;\n  }\n  invalidate() {\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n    const descriptors = this._cache = this._createDescriptors(chart);\n    this._notifyStateChanges(chart);\n    return descriptors;\n  }\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\nfunction allPlugins(config) {\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n    }\n  }\n  return plugins;\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, plugins, options, all) {\n  const result = [];\n  const context = chart.getContext();\n  for (let i = 0; i < plugins.length; i++) {\n    const plugin = plugins[i];\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, plugin, opts, context)\n    });\n  }\n  return result;\n}\nfunction pluginOpts(config, plugin, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  return config.createResolver(scopes, context, [''], {scriptable: false, indexable: false, allKeys: true});\n}\n\nfunction getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id, scaleOptions) {\n  if (id === 'x' || id === 'y') {\n    return id;\n  }\n  return scaleOptions.axis || axisFromPosition(scaleOptions.position) || id.charAt(0).toLowerCase();\n}\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const firstIDs = Object.create(null);\n  const scales = Object.create(null);\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    firstIDs[axis] = firstIDs[axis] || id;\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || firstIDs[axis] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nclass Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  get platform() {\n    return this._config.platform;\n  }\n  get type() {\n    return this._config.type;\n  }\n  set type(type) {\n    this._config.type = type;\n  }\n  get data() {\n    return this._config.data;\n  }\n  set data(data) {\n    this._config.data = initData(data);\n  }\n  get options() {\n    return this._config.options;\n  }\n  set options(options) {\n    this._config.options = options;\n  }\n  get plugins() {\n    return this._config.plugins;\n  }\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n    const scopes = new Set();\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n  chartOptionScopes() {\n    const {options, type} = this;\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {},\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).reduce((acc, key) => acc || isFunction(value[key]), false);\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n\nvar version = \"3.6.2\";\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nclass Chart {\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas can be reused.'\n      );\n    }\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      return aspectRatio;\n    }\n    if (maintainAspectRatio && _aspectRatio) {\n      return _aspectRatio;\n    }\n    return height ? width / height : null;\n  }\n  get data() {\n    return this.config.data;\n  }\n  set data(data) {\n    this.config.data = data;\n  }\n  get options() {\n    return this._options;\n  }\n  set options(options) {\n    this.config.options = options;\n  }\n  _initialize() {\n    this.notifyPlugins('beforeInit');\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n    this.bindEvents();\n    this.notifyPlugins('afterInit');\n    return this;\n  }\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n    this.notifyPlugins('resize', {size: newSize});\n    callback(options.onResize, [this, newSize], this);\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        this.render();\n      }\n    }\n  }\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n      scale.init(scaleOptions, options);\n    });\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n    this._removeUnreferencedMetasets();\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass.prototype, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n    this._updateMetasets();\n    return newControllers;\n  }\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n  update(mode) {\n    const config = this.config;\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n    this._plugins.invalidate();\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n    const newControllers = this.buildOrUpdateControllers();\n    this.notifyPlugins('beforeElementsUpdate');\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n    if (!animsDisabled) {\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n    this._updateDatasets(mode);\n    this.notifyPlugins('afterUpdate', {mode});\n    this._layers.sort(compare2Level('z', '_idx'));\n    if (this._lastEvent) {\n      this._eventHandler(this._lastEvent, true);\n    }\n    this.render();\n  }\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n    layouts.update(this, this.width, this.height, minPadding);\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        return;\n      }\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n    this.notifyPlugins('afterLayout');\n  }\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n    meta.controller._update(mode);\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this._drawDatasets();\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n    this.notifyPlugins('afterDraw');\n  }\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = this.chartArea;\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n    meta.controller.draw();\n    if (useClip) {\n      unclipArea(ctx);\n    }\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n    return [];\n  }\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n    return meta;\n  }\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n    const meta = this.getDatasetMeta(datasetIndex);\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n  destroy() {\n    const {canvas, ctx} = this;\n    this._stop();\n    this.config.clearCache();\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n    this.notifyPlugins('destroy');\n    delete instances[this.id];\n  }\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n    each(this.options.events, (type) => _add(type, listener));\n  }\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n    let detached;\n    const attached = () => {\n      _remove('attach', attached);\n      this.attached = true;\n      this.resize();\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n    detached = () => {\n      this.attached = false;\n      _remove('resize', listener);\n      this._stop();\n      this._resize(0, 0);\n      _add('attach', attached);\n    };\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n  _eventHandler(e, replay) {\n    const args = {event: e, replay, cancelable: true};\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n    const changed = this._handleEvent(e, replay);\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n    if (changed || args.changed) {\n      this.render();\n    }\n    return this;\n  }\n  _handleEvent(e, replay) {\n    const {_active: lastActive = [], options} = this;\n    const hoverOptions = options.hover;\n    const useFinalPosition = replay;\n    let active = [];\n    let changed = false;\n    let lastEvent = null;\n    if (e.type !== 'mouseout') {\n      active = this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n      lastEvent = e.type === 'click' ? this._lastEvent : e;\n    }\n    this._lastEvent = null;\n    if (_isPointInArea(e, this.chartArea, this._minPadding)) {\n      callback(options.onHover, [e, active, this], this);\n      if (e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu') {\n        callback(options.onClick, [e, active, this], this);\n      }\n    }\n    changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n    this._lastEvent = lastEvent;\n    return changed;\n  }\n}\nconst invalidatePlugins = () => each(Chart.instances, (chart) => chart._plugins.invalidate());\nconst enumerable = true;\nObject.defineProperties(Chart, {\n  defaults: {\n    enumerable,\n    value: defaults\n  },\n  instances: {\n    enumerable,\n    value: instances\n  },\n  overrides: {\n    enumerable,\n    value: overrides\n  },\n  registry: {\n    enumerable,\n    value: registry\n  },\n  version: {\n    enumerable,\n    value: version\n  },\n  getChart: {\n    enumerable,\n    value: getChart\n  },\n  register: {\n    enumerable,\n    value: (...items) => {\n      registry.add(...items);\n      invalidatePlugins();\n    }\n  },\n  unregister: {\n    enumerable,\n    value: (...items) => {\n      registry.remove(...items);\n      invalidatePlugins();\n    }\n  }\n});\n\nfunction clipArc(ctx, element, endAngle) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\nfunction pathArc(ctx, element, offset, spacing, end) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  let spacingOffset = 0;\n  const alpha = end - start;\n  if (spacing) {\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerEndAdjustedAngle);\n  if (outerEnd > 0) {\n    const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n    ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n  }\n  const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n  ctx.lineTo(p4.x, p4.y);\n  if (innerEnd > 0) {\n    const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n    ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n  }\n  ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), startAngle + (innerStart / innerRadius), true);\n  if (innerStart > 0) {\n    const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n    ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n  }\n  const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n  ctx.lineTo(p8.x, p8.y);\n  if (outerStart > 0) {\n    const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n    ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, startAngle + TAU);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + circumference % TAU;\n      if (circumference % TAU === 0) {\n        endAngle += TAU;\n      }\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawFullCircleBorders(ctx, element, inner) {\n  const {x, y, startAngle, pixelMargin, fullCircles} = element;\n  const outerRadius = Math.max(element.outerRadius - pixelMargin, 0);\n  const innerRadius = element.innerRadius + pixelMargin;\n  let i;\n  if (inner) {\n    clipArc(ctx, element, startAngle + TAU);\n  }\n  ctx.beginPath();\n  ctx.arc(x, y, innerRadius, startAngle + TAU, startAngle, true);\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle, startAngle + TAU);\n  for (i = 0; i < fullCircles; ++i) {\n    ctx.stroke();\n  }\n}\nfunction drawBorder(ctx, element, offset, spacing, endAngle) {\n  const {options} = element;\n  const inner = options.borderAlign === 'inner';\n  if (!options.borderWidth) {\n    return;\n  }\n  if (inner) {\n    ctx.lineWidth = options.borderWidth * 2;\n    ctx.lineJoin = 'round';\n  } else {\n    ctx.lineWidth = options.borderWidth;\n    ctx.lineJoin = 'bevel';\n  }\n  if (element.fullCircles) {\n    drawFullCircleBorders(ctx, element, inner);\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  pathArc(ctx, element, offset, spacing, endAngle);\n  ctx.stroke();\n}\nclass ArcElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(chartX, chartY, useFinalPosition) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = this.options.spacing / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n    return (betweenAngles && withinRadius);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference',\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n  tooltipPosition(useFinalPosition) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n  draw(ctx) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 2;\n    const spacing = (options.spacing || 0) / 2;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n    ctx.save();\n    let radiusOffset = 0;\n    if (offset) {\n      radiusOffset = offset / 2;\n      const halfAngle = (this.startAngle + this.endAngle) / 2;\n      ctx.translate(Math.cos(halfAngle) * radiusOffset, Math.sin(halfAngle) * radiusOffset);\n      if (this.circumference >= PI) {\n        radiusOffset = offset;\n      }\n    }\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    const endAngle = drawArc(ctx, this, radiusOffset, spacing);\n    drawBorder(ctx, this, radiusOffset, spacing, endAngle);\n    ctx.restore();\n  }\n}\nArcElement.id = 'arc';\nArcElement.defaults = {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n};\nArcElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor'\n};\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nclass LineElement extends Element {\n  constructor(cfg) {\n    super();\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n  get points() {\n    return this._points;\n  }\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n    if (!segments.length) {\n      return;\n    }\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n    start = start || 0;\n    count = count || (this.points.length - start);\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n    if (points.length && options.borderWidth) {\n      ctx.save();\n      draw(ctx, this, start, count);\n      ctx.restore();\n    }\n    if (this.animated) {\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\nLineElement.id = 'line';\nLineElement.defaults = {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0,\n};\nLineElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\nLineElement.descriptors = {\n  _scriptable: true,\n  _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n};\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\nclass PointElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange$1(this, mouseX, 'x', useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange$1(this, mouseY, 'y', useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n  size(options) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n  draw(ctx, area) {\n    const options = this.options;\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n  getRange() {\n    const options = this.options || {};\n    return options.radius + options.hitRadius;\n  }\n}\nPointElement.id = 'point';\nPointElement.defaults = {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n};\nPointElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition);\n  let left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {left, top, right, bottom};\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n  const enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nclass BarElement extends Element {\n  constructor(cfg) {\n    super();\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n    ctx.save();\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n    ctx.restore();\n  }\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition);\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\nBarElement.id = 'bar';\nBarElement.defaults = {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n};\nBarElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nLineElement: LineElement,\nPointElement: PointElement,\nBarElement: BarElement\n});\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  const samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  const decimated = [];\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      const lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {value: data});\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n  let start = 0;\n  let count;\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {start, count};\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    const availableWidth = chart.width;\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (meta.type !== 'line') {\n        return;\n      }\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction decodeFill(line, index, count) {\n  const fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  let target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    if (fill[0] === '-' || fill[0] === '+') {\n      target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n      return false;\n    }\n    return target;\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  let target = null;\n  let horizontal;\n  if (fill === 'start') {\n    target = scale.bottom;\n  } else if (fill === 'end') {\n    target = scale.top;\n  } else if (isObject(fill)) {\n    target = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    target = scale.getBasePixel();\n  }\n  if (isNumberFinite(target)) {\n    horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? target : null,\n      y: horizontal ? null : target\n    };\n  }\n  return null;\n}\nclass simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const target = [];\n  const start = options.reverse ? scale.max : scale.min;\n  const end = options.reverse ? scale.min : scale.max;\n  let i, center, value;\n  if (fill === 'start') {\n    value = start;\n  } else if (fill === 'end') {\n    value = end;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  if (options.grid.circular) {\n    center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\nfunction buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(createBoundaryLine({x: null, y: scale.bottom}, line));\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\nfunction getTarget(source) {\n  const {chart, fill, line} = source;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  const boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return createBoundaryLine(boundary, line);\n}\nfunction createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _clip(ctx, target, clipY) {\n  ctx.beginPath();\n  target.path(ctx);\n  ctx.lineTo(target.last().x, clipY);\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = findSegmentEnd(start, end, points);\n    const bounds = getBounds(property, points[start], points[end], segment.loop);\n    if (!target.segments) {\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n    const targetSegments = _boundSegments(target, bounds);\n    for (const tgt of targetSegments) {\n      const subBounds = getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nfunction _fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n    clipBounds(ctx, scale, notShape && getBounds(property, start, end));\n    ctx.beginPath();\n    const lineLoop = !!line.pathSegment(ctx, src);\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n    ctx.restore();\n  }\n}\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    _clip(ctx, target, area.top);\n    _fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    _clip(ctx, target, area.bottom);\n  }\n  _fill(ctx, {line, target, color: below, scale, property});\n  ctx.restore();\n}\nfunction drawfill(ctx, source, area) {\n  const target = getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\nvar plugin_filler = {\n  id: 'filler',\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw) {\n        drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (source) {\n        drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n    if (!source || source.fill === false || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n  constructor(config) {\n    super();\n    this._added = false;\n    this.legendHitBoxes = [];\n    this._hoveredItem = null;\n    this.doughnutMode = false;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n    this.legendItems = legendItems;\n  }\n  fit() {\n    const {options, ctx} = this;\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n    let width, height;\n    ctx.font = labelFont.string;\n    if (this.isHorizontal()) {\n      width = this.maxWidth;\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight;\n      width = this._fitCols(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    }\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n    return totalHeight;\n  }\n  _fitCols(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n    let left = 0;\n    let col = 0;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight});\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight});\n    return totalWidth;\n  }\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n      this._draw();\n      unclipArea(ctx);\n    }\n  }\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {color: fontColor, padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n    this.drawTitle();\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n      ctx.save();\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n      if (labelOpts.usePointStyle) {\n        const drawOptions = {\n          radius: boxWidth * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n        drawPoint(ctx, drawOptions, centerX, centerY);\n      } else {\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n        ctx.beginPath();\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    };\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n    overrideTextDirection(this.ctx, opts.textDirection);\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor || fontColor;\n      ctx.fillStyle = legendItem.fontColor || fontColor;\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n      rtlHelper.setWidth(this.width);\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n      const realX = rtlHelper.x(x);\n      drawLegendBox(realX, y, legendItem);\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n      fillText(rtlHelper.x(x), y, legendItem);\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    if (!titleOpts.display) {\n      return;\n    }\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n    let left = this.left;\n    let maxWidth = this.width;\n    if (this.isHorizontal()) {\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n    const x = _alignStartEnd(position, left, left + maxWidth);\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          return this.legendItems[i];\n        }\n      }\n    }\n    return null;\n  }\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n    if (e.type === 'mousemove') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        callback(opts.onLeave, [e, previous, this], this);\n      }\n      this._hoveredItem = hoveredItem;\n      if (hoveredItem && !sameItem) {\n        callback(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      callback(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\nfunction isListened(type, opts) {\n  if (type === 'mousemove' && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color}} = chart.legend.options;\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: 0,\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n\nclass Title extends Element {\n  constructor(config) {\n    super();\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n    this.left = 0;\n    this.top = 0;\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    if (!opts.display) {\n      return;\n    }\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n\nconst positioners = {\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x,\n      y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip._chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {width, height};\n}\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  const yAlign = options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nclass Tooltip extends Element {\n  constructor(config) {\n    super();\n    this.opacity = 0;\n    this._active = [];\n    this._chart = config._chart;\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n    if (cached) {\n      return cached;\n    }\n    const chart = this._chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this._chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n    return animations;\n  }\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this._chart.getContext(), this, this._tooltipItems));\n  }\n  getTitle(context, options) {\n    const {callbacks} = options;\n    const beforeTitle = callbacks.beforeTitle.apply(this, [context]);\n    const title = callbacks.title.apply(this, [context]);\n    const afterTitle = callbacks.afterTitle.apply(this, [context]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n    return lines;\n  }\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.beforeBody.apply(this, [tooltipItems]));\n  }\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(scoped.beforeLabel.call(this, context)));\n      pushOrConcat(bodyItem.lines, scoped.label.call(this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(scoped.afterLabel.call(this, context)));\n      bodyItems.push(bodyItem);\n    });\n    return bodyItems;\n  }\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(options.callbacks.afterBody.apply(this, [tooltipItems]));\n  }\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n    const beforeFooter = callbacks.beforeFooter.apply(this, [tooltipItems]);\n    const footer = callbacks.footer.apply(this, [tooltipItems]);\n    const afterFooter = callbacks.afterFooter.apply(this, [tooltipItems]);\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n    return lines;\n  }\n  _createItems(options) {\n    const active = this._active;\n    const data = this._chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this._chart, active[i]));\n    }\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(scoped.labelColor.call(this, context));\n      labelPointStyles.push(scoped.labelPointStyle.call(this, context));\n      labelTextColors.push(scoped.labelTextColor.call(this, context));\n    });\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this._chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this._chart);\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n    if (changed && options.external) {\n      options.external.call(this, {chart: this._chart, tooltip: this, replay});\n    }\n  }\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.titleAlign, options);\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing;\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing;\n        }\n      }\n    }\n  }\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColors = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2,\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.fillStyle = labelColors.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      ctx.lineWidth = labelColors.borderWidth || 1;\n      ctx.strokeStyle = labelColors.borderColor;\n      ctx.setLineDash(labelColors.borderDash || []);\n      ctx.lineDashOffset = labelColors.borderDashOffset || 0;\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth - boxPadding);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - boxPadding - 2);\n      const borderRadius = toTRBLCorners(labelColors.borderRadius);\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.fillStyle = labelColors.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n      lines = bodyItem.lines;\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n      each(bodyItem.after, fillLineOfText);\n    }\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing;\n  }\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n      footerFont = toFont(options.footerFont);\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n    ctx.fill();\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n  _updateAnimationTarget(options) {\n    const chart = this._chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n    if (!opacity) {\n      return;\n    }\n    this._updateAnimationTarget(options);\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n    const padding = toPadding(options.padding);\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n      this.drawBackground(pt, ctx, tooltipSize, options);\n      overrideTextDirection(ctx, options.textDirection);\n      pt.y += padding.top;\n      this.drawTitle(pt, ctx, options);\n      this.drawBody(pt, ctx, options);\n      this.drawFooter(pt, ctx, options);\n      restoreTextDirection(ctx, options.textDirection);\n      ctx.restore();\n    }\n  }\n  getActiveElements() {\n    return this._active || [];\n  }\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this._chart.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this.update(true);\n    }\n  }\n  handleEvent(e, replay) {\n    const options = this.options;\n    const lastActive = this._active || [];\n    let changed = false;\n    let active = [];\n    if (e.type !== 'mouseout') {\n      active = this._chart.getElementsAtEventForMode(e, options.mode, options, replay);\n      if (options.reverse) {\n        active.reverse();\n      }\n    }\n    const positionChanged = this._positionChanged(active, e);\n    changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n    if (changed) {\n      this._active = active;\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n        this.update(true, replay);\n      }\n    }\n    return changed;\n  }\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\nTooltip.positioners = positioners;\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({_chart: chart, options});\n    }\n  },\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n    const args = {\n      tooltip\n    };\n    if (chart.notifyPlugins('beforeTooltipDraw', args) === false) {\n      return;\n    }\n    if (tooltip) {\n      tooltip.draw(chart.ctx);\n    }\n    chart.notifyPlugins('afterTooltipDraw', args);\n  },\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: {\n      beforeTitle: noop,\n      title(tooltipItems) {\n        if (tooltipItems.length > 0) {\n          const item = tooltipItems[0];\n          const labels = item.chart.data.labels;\n          const labelCount = labels ? labels.length : 0;\n          if (this && this.options && this.options.mode === 'dataset') {\n            return item.dataset.label || '';\n          } else if (item.label) {\n            return item.label;\n          } else if (labelCount > 0 && item.dataIndex < labelCount) {\n            return labels[item.dataIndex];\n          }\n        }\n        return '';\n      },\n      afterTitle: noop,\n      beforeBody: noop,\n      beforeLabel: noop,\n      label(tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n          return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n          label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n          label += value;\n        }\n        return label;\n      },\n      labelColor(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          borderColor: options.borderColor,\n          backgroundColor: options.backgroundColor,\n          borderWidth: options.borderWidth,\n          borderDash: options.borderDash,\n          borderDashOffset: options.borderDashOffset,\n          borderRadius: 0,\n        };\n      },\n      labelTextColor() {\n        return this.options.bodyColor;\n      },\n      labelPointStyle(tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n          pointStyle: options.pointStyle,\n          rotation: options.rotation,\n        };\n      },\n      afterLabel: noop,\n      afterBody: noop,\n      beforeFooter: noop,\n      footer: noop,\n      afterFooter: noop\n    }\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nDecimation: plugin_decimation,\nFiller: plugin_filler,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\nclass CategoryScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n      return labels[value];\n    }\n    return value;\n  }\n  configure() {\n    super.configure();\n    if (!this.isHorizontal()) {\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n  getBasePixel() {\n    return this.bottom;\n  }\n}\nCategoryScale.id = 'category';\nCategoryScale.defaults = {\n  ticks: {\n    callback: CategoryScale.prototype.getLabelForValue\n  }\n};\n\nfunction generateTicks$1(generationOptions, dataRange) {\n  const ticks = [];\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    ticks.push({value: Math.round((niceMin + j * spacing) * factor) / factor});\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n    return +raw;\n  }\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n    if (min === max) {\n      let offset = 1;\n      if (max >= Number.MAX_SAFE_INTEGER || min <= Number.MIN_SAFE_INTEGER) {\n        offset = Math.abs(max * 0.05);\n      }\n      setMax(max + offset);\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n    return maxTicks;\n  }\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n    super.configure();\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n\nclass LinearScale extends LinearScaleBase {\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? min : 0;\n    this.max = isNumberFinite(max) ? max : 1;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\nLinearScale.id = 'linear';\nLinearScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n};\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, Math.floor(log10(tickVal))));\n  return remain === 1;\n}\nfunction generateTicks(generationOptions, dataRange) {\n  const endExp = Math.floor(log10(dataRange.max));\n  const endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));\n  const ticks = [];\n  let tickVal = finiteOrDefault(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));\n  let exp = Math.floor(log10(tickVal));\n  let significand = Math.floor(tickVal / Math.pow(10, exp));\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  do {\n    ticks.push({value: tickVal, major: isMajor(tickVal)});\n    ++significand;\n    if (significand === 10) {\n      significand = 1;\n      ++exp;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;\n  } while (exp < endExp || (exp === endExp && significand < endSignificand));\n  const lastTick = finiteOrDefault(generationOptions.max, tickVal);\n  ticks.push({value: lastTick, major: isMajor(tickVal)});\n  return ticks;\n}\nclass LogarithmicScale extends Scale {\n  constructor(cfg) {\n    super(cfg);\n    this.start = undefined;\n    this.end = undefined;\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isNumberFinite(value) && value > 0 ? value : null;\n  }\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n    this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n    this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n    this.handleTickRangeOptions();\n  }\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n    const exp = (v, m) => Math.pow(10, Math.floor(log10(v)) + m);\n    if (min === max) {\n      if (min <= 0) {\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(exp(min, -1));\n        setMax(exp(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(exp(max, -1));\n    }\n    if (max <= 0) {\n      setMax(exp(min, +1));\n    }\n    if (this._zero && this.min !== this._suggestedMin && min === exp(this.min, 0)) {\n      setMin(exp(min, -1));\n    }\n    this.min = min;\n    this.max = max;\n  }\n  buildTicks() {\n    const opts = this.options;\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n    if (opts.reverse) {\n      ticks.reverse();\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n    return ticks;\n  }\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n  configure() {\n    const start = this.min;\n    super.configure();\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\nLogarithmicScale.id = 'logarithmic';\nLogarithmicScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n};\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  const furthestLimits = {\n    l: 0,\n    r: scale.width,\n    t: 0,\n    b: scale.height - scale.paddingTop\n  };\n  const furthestAngles = {};\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale.getLabels().length;\n  for (let i = 0; i < valueCount; i++) {\n    const opts = scale.options.pointLabels.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i]);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    const angleRadians = scale.getIndexAngle(i);\n    const angle = toDegrees(angleRadians);\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    if (hLimits.start < furthestLimits.l) {\n      furthestLimits.l = hLimits.start;\n      furthestAngles.l = angleRadians;\n    }\n    if (hLimits.end > furthestLimits.r) {\n      furthestLimits.r = hLimits.end;\n      furthestAngles.r = angleRadians;\n    }\n    if (vLimits.start < furthestLimits.t) {\n      furthestLimits.t = vLimits.start;\n      furthestAngles.t = angleRadians;\n    }\n    if (vLimits.end > furthestLimits.b) {\n      furthestLimits.b = vLimits.end;\n      furthestAngles.b = angleRadians;\n    }\n  }\n  scale._setReductions(scale.drawingArea, furthestLimits, furthestAngles);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale.getLabels().length;\n  const opts = scale.options;\n  const tickBackdropHeight = getTickBackdropHeight(opts);\n  const outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);\n  for (let i = 0; i < valueCount; i++) {\n    const extra = (i === 0 ? tickBackdropHeight / 2 : 0);\n    const pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + padding[i]);\n    const angle = toDegrees(scale.getIndexAngle(i));\n    const size = labelSizes[i];\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    items.push({\n      x: pointLabelPosition.x,\n      y,\n      textAlign,\n      left,\n      top: y,\n      right: left + size.w,\n      bottom: y + size.h\n    });\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign, left, top, right, bottom} = scale._pointLabelItems[i];\n    const {backdropColor} = optsAtIndex;\n    if (!isNullOrUndef(backdropColor)) {\n      const padding = toPadding(optsAtIndex.backdropPadding);\n      ctx.fillStyle = backdropColor;\n      ctx.fillRect(left - padding.left, top - padding.top, right - left + padding.width, bottom - top + padding.height);\n    }\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n  const {color, lineWidth} = gridLineOpts;\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(gridLineOpts.borderDash);\n  ctx.lineDashOffset = gridLineOpts.borderDashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction numberOrZero(param) {\n  return isNumber(param) ? param : 0;\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\nclass RadialLinearScale extends LinearScaleBase {\n  constructor(cfg) {\n    super(cfg);\n    this.xCenter = undefined;\n    this.yCenter = undefined;\n    this.drawingArea = undefined;\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n  setDimensions() {\n    this.width = this.maxWidth;\n    this.height = this.maxHeight;\n    this.paddingTop = getTickBackdropHeight(this.options) / 2;\n    this.xCenter = Math.floor(this.width / 2);\n    this.yCenter = Math.floor((this.height - this.paddingTop) / 2);\n    this.drawingArea = Math.min(this.height - this.paddingTop, this.width) / 2;\n  }\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n    this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n    this.handleTickRangeOptions();\n  }\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n    this._pointLabels = this.getLabels().map((value, index) => {\n      const label = callback(this.options.pointLabels.callback, [value, index], this);\n      return label || label === 0 ? label : '';\n    });\n  }\n  fit() {\n    const opts = this.options;\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n  _setReductions(largestPossibleRadius, furthestLimits, furthestAngles) {\n    let radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);\n    let radiusReductionRight = Math.max(furthestLimits.r - this.width, 0) / Math.sin(furthestAngles.r);\n    let radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);\n    let radiusReductionBottom = -Math.max(furthestLimits.b - (this.height - this.paddingTop), 0) / Math.cos(furthestAngles.b);\n    radiusReductionLeft = numberOrZero(radiusReductionLeft);\n    radiusReductionRight = numberOrZero(radiusReductionRight);\n    radiusReductionTop = numberOrZero(radiusReductionTop);\n    radiusReductionBottom = numberOrZero(radiusReductionBottom);\n    this.drawingArea = Math.max(largestPossibleRadius / 2, Math.min(\n      Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),\n      Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2)));\n    this.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);\n  }\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    const maxRight = this.width - rightMovement - this.drawingArea;\n    const maxLeft = leftMovement + this.drawingArea;\n    const maxTop = topMovement + this.drawingArea;\n    const maxBottom = (this.height - this.paddingTop) - bottomMovement - this.drawingArea;\n    this.xCenter = Math.floor(((maxLeft + maxRight) / 2) + this.left);\n    this.yCenter = Math.floor(((maxTop + maxBottom) / 2) + this.top + this.paddingTop);\n  }\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / this.getLabels().length;\n    const startAngle = this.options.startAngle || 0;\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n  getPointPosition(index, distanceFromCenter) {\n    const angle = this.getIndexAngle(index) - HALF_PI;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this.getLabels().length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid} = opts;\n    const labelCount = this.getLabels().length;\n    let i, offset, position;\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const optsAtIndex = grid.setContext(this.getContext(index - 1));\n          drawRadiusLine(this, optsAtIndex, offset, labelCount);\n        }\n      });\n    }\n    if (angleLines.display) {\n      ctx.save();\n      for (i = this.getLabels().length - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n        if (!lineWidth || !color) {\n          continue;\n        }\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n      ctx.restore();\n    }\n  }\n  drawBorder() {}\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n    if (!tickOpts.display) {\n      return;\n    }\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n      });\n    });\n    ctx.restore();\n  }\n  drawTitle() {}\n}\nRadialLinearScale.id = 'radialLinear';\nRadialLinearScale.defaults = {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback(label) {\n      return label;\n    },\n    padding: 5\n  }\n};\nRadialLinearScale.defaultRoutes = {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n};\nRadialLinearScale.descriptors = {\n  angleLines: {\n    _fallback: 'grid'\n  }\n};\n\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\nconst UNITS = (Object.keys(INTERVALS));\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, parser)\n      : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n  constructor(props) {\n    super(props);\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    this._unit = 'day';\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n  init(scaleOpts, opts) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n    mergeIf(time.displayFormats, adapter.formats());\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n    super.init(scaleOpts);\n    this._normalized = opts.normalized;\n  }\n  parse(raw, index) {\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n    if (!minDefined || !maxDefined) {\n      _applyBounds(this._getLabelBounds());\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n    min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n    const min = this.min;\n    const max = this.max;\n    const ticks = _filterBetween(timestamps, min, max);\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n    if (options.reverse) {\n      ticks.reverse();\n    }\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n  initOffsets(timestamps) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(timeOpts.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n    return Object.keys(ticks).sort((a, b) => a - b).map(x => +x);\n  }\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n    const label = this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    const formatter = options.ticks.callback;\n    return formatter ? callback(formatter, [label, index, ticks], this) : label;\n  }\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const metas = this.getMatchingVisibleMetas();\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n    return (this._cache.data = this.normalize(timestamps));\n  }\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n  normalize(values) {\n    return _arrayUnique(values.sort(sorter));\n  }\n}\nTimeScale.id = 'time';\nTimeScale.defaults = {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    major: {\n      enabled: false\n    }\n  }\n};\n\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n  constructor(props) {\n    super(props);\n    this._table = [];\n    this._minPos = undefined;\n    this._tableRange = undefined;\n  }\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n    if (items.length < 2) {\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n    if (timestamps.length) {\n      return timestamps;\n    }\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n    return timestamps;\n  }\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\nTimeSeriesScale.id = 'timeseries';\nTimeSeriesScale.defaults = TimeScale.defaults;\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, plugin_filler as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, elements, layouts, plugins, registerables, registry, scales };\n","/*!\n * Chart.js v3.6.2\n * https://www.chartjs.org\n * (c) 2021 Chart.js Contributors\n * Released under the MIT License\n */\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n  return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\nconst requestAnimFrame = (function() {\n  if (typeof window === 'undefined') {\n    return function(callback) {\n      return callback();\n    };\n  }\n  return window.requestAnimationFrame;\n}());\nfunction throttled(fn, thisArg, updateFn) {\n  const updateArgs = updateFn || ((args) => Array.prototype.slice.call(args));\n  let ticking = false;\n  let args = [];\n  return function(...rest) {\n    args = updateArgs(rest);\n    if (!ticking) {\n      ticking = true;\n      requestAnimFrame.call(window, () => {\n        ticking = false;\n        fn.apply(thisArg, args);\n      });\n    }\n  };\n}\nfunction debounce(fn, delay) {\n  let timeout;\n  return function(...args) {\n    if (delay) {\n      clearTimeout(timeout);\n      timeout = setTimeout(fn, delay, args);\n    } else {\n      fn.apply(this, args);\n    }\n    return delay;\n  };\n}\nconst _toLeftRightCenter = (align) => align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\nconst _alignStartEnd = (align, start, end) => align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\nconst _textX = (align, left, right, rtl) => {\n  const check = rtl ? 'left' : 'right';\n  return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n\nfunction noop() {}\nconst uid = (function() {\n  let id = 0;\n  return function() {\n    return id++;\n  };\n}());\nfunction isNullOrUndef(value) {\n  return value === null || typeof value === 'undefined';\n}\nfunction isArray(value) {\n  if (Array.isArray && Array.isArray(value)) {\n    return true;\n  }\n  const type = Object.prototype.toString.call(value);\n  if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {\n    return true;\n  }\n  return false;\n}\nfunction isObject(value) {\n  return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\nconst isNumberFinite = (value) => (typeof value === 'number' || value instanceof Number) && isFinite(+value);\nfunction finiteOrDefault(value, defaultValue) {\n  return isNumberFinite(value) ? value : defaultValue;\n}\nfunction valueOrDefault(value, defaultValue) {\n  return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100\n    : value / dimension;\nconst toDimension = (value, dimension) =>\n  typeof value === 'string' && value.endsWith('%') ?\n    parseFloat(value) / 100 * dimension\n    : +value;\nfunction callback(fn, args, thisArg) {\n  if (fn && typeof fn.call === 'function') {\n    return fn.apply(thisArg, args);\n  }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n  let i, len, keys;\n  if (isArray(loopable)) {\n    len = loopable.length;\n    if (reverse) {\n      for (i = len - 1; i >= 0; i--) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    } else {\n      for (i = 0; i < len; i++) {\n        fn.call(thisArg, loopable[i], i);\n      }\n    }\n  } else if (isObject(loopable)) {\n    keys = Object.keys(loopable);\n    len = keys.length;\n    for (i = 0; i < len; i++) {\n      fn.call(thisArg, loopable[keys[i]], keys[i]);\n    }\n  }\n}\nfunction _elementsEqual(a0, a1) {\n  let i, ilen, v0, v1;\n  if (!a0 || !a1 || a0.length !== a1.length) {\n    return false;\n  }\n  for (i = 0, ilen = a0.length; i < ilen; ++i) {\n    v0 = a0[i];\n    v1 = a1[i];\n    if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction clone$1(source) {\n  if (isArray(source)) {\n    return source.map(clone$1);\n  }\n  if (isObject(source)) {\n    const target = Object.create(null);\n    const keys = Object.keys(source);\n    const klen = keys.length;\n    let k = 0;\n    for (; k < klen; ++k) {\n      target[keys[k]] = clone$1(source[keys[k]]);\n    }\n    return target;\n  }\n  return source;\n}\nfunction isValidKey(key) {\n  return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;\n}\nfunction _merger(key, target, source, options) {\n  if (!isValidKey(key)) {\n    return;\n  }\n  const tval = target[key];\n  const sval = source[key];\n  if (isObject(tval) && isObject(sval)) {\n    merge(tval, sval, options);\n  } else {\n    target[key] = clone$1(sval);\n  }\n}\nfunction merge(target, source, options) {\n  const sources = isArray(source) ? source : [source];\n  const ilen = sources.length;\n  if (!isObject(target)) {\n    return target;\n  }\n  options = options || {};\n  const merger = options.merger || _merger;\n  for (let i = 0; i < ilen; ++i) {\n    source = sources[i];\n    if (!isObject(source)) {\n      continue;\n    }\n    const keys = Object.keys(source);\n    for (let k = 0, klen = keys.length; k < klen; ++k) {\n      merger(keys[k], target, source, options);\n    }\n  }\n  return target;\n}\nfunction mergeIf(target, source) {\n  return merge(target, source, {merger: _mergerIf});\n}\nfunction _mergerIf(key, target, source) {\n  if (!isValidKey(key)) {\n    return;\n  }\n  const tval = target[key];\n  const sval = source[key];\n  if (isObject(tval) && isObject(sval)) {\n    mergeIf(tval, sval);\n  } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n    target[key] = clone$1(sval);\n  }\n}\nfunction _deprecated(scope, value, previous, current) {\n  if (value !== undefined) {\n    console.warn(scope + ': \"' + previous +\n\t\t\t'\" is deprecated. Please use \"' + current + '\" instead');\n  }\n}\nconst emptyString = '';\nconst dot = '.';\nfunction indexOfDotOrLength(key, start) {\n  const idx = key.indexOf(dot, start);\n  return idx === -1 ? key.length : idx;\n}\nfunction resolveObjectKey(obj, key) {\n  if (key === emptyString) {\n    return obj;\n  }\n  let pos = 0;\n  let idx = indexOfDotOrLength(key, pos);\n  while (obj && idx > pos) {\n    obj = obj[key.substr(pos, idx - pos)];\n    pos = idx + 1;\n    idx = indexOfDotOrLength(key, pos);\n  }\n  return obj;\n}\nfunction _capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value) => typeof value !== 'undefined';\nconst isFunction = (value) => typeof value === 'function';\nconst setsEqual = (a, b) => {\n  if (a.size !== b.size) {\n    return false;\n  }\n  for (const item of a) {\n    if (!b.has(item)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction niceNum(range) {\n  const roundedRange = Math.round(range);\n  range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n  const niceRange = Math.pow(10, Math.floor(log10(range)));\n  const fraction = range / niceRange;\n  const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n  return niceFraction * niceRange;\n}\nfunction _factorize(value) {\n  const result = [];\n  const sqrt = Math.sqrt(value);\n  let i;\n  for (i = 1; i < sqrt; i++) {\n    if (value % i === 0) {\n      result.push(i);\n      result.push(value / i);\n    }\n  }\n  if (sqrt === (sqrt | 0)) {\n    result.push(sqrt);\n  }\n  result.sort((a, b) => a - b).pop();\n  return result;\n}\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostEquals(x, y, epsilon) {\n  return Math.abs(x - y) < epsilon;\n}\nfunction almostWhole(x, epsilon) {\n  const rounded = Math.round(x);\n  return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);\n}\nfunction _setMinAndMaxByKey(array, target, property) {\n  let i, ilen, value;\n  for (i = 0, ilen = array.length; i < ilen; i++) {\n    value = array[i][property];\n    if (!isNaN(value)) {\n      target.min = Math.min(target.min, value);\n      target.max = Math.max(target.max, value);\n    }\n  }\n}\nfunction toRadians(degrees) {\n  return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n  return radians * (180 / PI);\n}\nfunction _decimalPlaces(x) {\n  if (!isNumberFinite(x)) {\n    return;\n  }\n  let e = 1;\n  let p = 0;\n  while (Math.round(x * e) / e !== x) {\n    e *= 10;\n    p++;\n  }\n  return p;\n}\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n  const distanceFromXCenter = anglePoint.x - centrePoint.x;\n  const distanceFromYCenter = anglePoint.y - centrePoint.y;\n  const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n  let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n  if (angle < (-0.5 * PI)) {\n    angle += TAU;\n  }\n  return {\n    angle,\n    distance: radialDistanceFromCenter\n  };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n  return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\nfunction _angleDiff(a, b) {\n  return (a - b + PITAU) % TAU - PI;\n}\nfunction _normalizeAngle(a) {\n  return (a % TAU + TAU) % TAU;\n}\nfunction _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n  const a = _normalizeAngle(angle);\n  const s = _normalizeAngle(start);\n  const e = _normalizeAngle(end);\n  const angleToStart = _normalizeAngle(s - a);\n  const angleToEnd = _normalizeAngle(e - a);\n  const startToAngle = _normalizeAngle(a - s);\n  const endToAngle = _normalizeAngle(a - e);\n  return a === s || a === e || (sameAngleIsFullCircle && s === e)\n    || (angleToStart > angleToEnd && startToAngle < endToAngle);\n}\nfunction _limitValue(value, min, max) {\n  return Math.max(min, Math.min(max, value));\n}\nfunction _int16Range(value) {\n  return _limitValue(value, -32768, 32767);\n}\nfunction _isBetween(value, start, end, epsilon = 1e-6) {\n  return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nconst atEdge = (t) => t === 0 || t === 1;\nconst elasticIn = (t, s, p) => -(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p) => Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\nconst effects = {\n  linear: t => t,\n  easeInQuad: t => t * t,\n  easeOutQuad: t => -t * (t - 2),\n  easeInOutQuad: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t\n    : -0.5 * ((--t) * (t - 2) - 1),\n  easeInCubic: t => t * t * t,\n  easeOutCubic: t => (t -= 1) * t * t + 1,\n  easeInOutCubic: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t\n    : 0.5 * ((t -= 2) * t * t + 2),\n  easeInQuart: t => t * t * t * t,\n  easeOutQuart: t => -((t -= 1) * t * t * t - 1),\n  easeInOutQuart: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t\n    : -0.5 * ((t -= 2) * t * t * t - 2),\n  easeInQuint: t => t * t * t * t * t,\n  easeOutQuint: t => (t -= 1) * t * t * t * t + 1,\n  easeInOutQuint: t => ((t /= 0.5) < 1)\n    ? 0.5 * t * t * t * t * t\n    : 0.5 * ((t -= 2) * t * t * t * t + 2),\n  easeInSine: t => -Math.cos(t * HALF_PI) + 1,\n  easeOutSine: t => Math.sin(t * HALF_PI),\n  easeInOutSine: t => -0.5 * (Math.cos(PI * t) - 1),\n  easeInExpo: t => (t === 0) ? 0 : Math.pow(2, 10 * (t - 1)),\n  easeOutExpo: t => (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1,\n  easeInOutExpo: t => atEdge(t) ? t : t < 0.5\n    ? 0.5 * Math.pow(2, 10 * (t * 2 - 1))\n    : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n  easeInCirc: t => (t >= 1) ? t : -(Math.sqrt(1 - t * t) - 1),\n  easeOutCirc: t => Math.sqrt(1 - (t -= 1) * t),\n  easeInOutCirc: t => ((t /= 0.5) < 1)\n    ? -0.5 * (Math.sqrt(1 - t * t) - 1)\n    : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n  easeInElastic: t => atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n  easeOutElastic: t => atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n  easeInOutElastic(t) {\n    const s = 0.1125;\n    const p = 0.45;\n    return atEdge(t) ? t :\n      t < 0.5\n        ? 0.5 * elasticIn(t * 2, s, p)\n        : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n  },\n  easeInBack(t) {\n    const s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n  },\n  easeOutBack(t) {\n    const s = 1.70158;\n    return (t -= 1) * t * ((s + 1) * t + s) + 1;\n  },\n  easeInOutBack(t) {\n    let s = 1.70158;\n    if ((t /= 0.5) < 1) {\n      return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));\n    }\n    return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);\n  },\n  easeInBounce: t => 1 - effects.easeOutBounce(1 - t),\n  easeOutBounce(t) {\n    const m = 7.5625;\n    const d = 2.75;\n    if (t < (1 / d)) {\n      return m * t * t;\n    }\n    if (t < (2 / d)) {\n      return m * (t -= (1.5 / d)) * t + 0.75;\n    }\n    if (t < (2.5 / d)) {\n      return m * (t -= (2.25 / d)) * t + 0.9375;\n    }\n    return m * (t -= (2.625 / d)) * t + 0.984375;\n  },\n  easeInOutBounce: t => (t < 0.5)\n    ? effects.easeInBounce(t * 2) * 0.5\n    : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5,\n};\n\n/*!\n * @kurkle/color v0.1.9\n * https://github.com/kurkle/color#readme\n * (c) 2020 Jukka Kurkela\n * Released under the MIT License\n */\nconst map = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = '0123456789ABCDEF';\nconst h1 = (b) => hex[b & 0xF];\nconst h2 = (b) => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = (b) => (((b & 0xF0) >> 4) === (b & 0xF));\nfunction isShort(v) {\n\treturn eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\n}\nfunction hexParse(str) {\n\tvar len = str.length;\n\tvar ret;\n\tif (str[0] === '#') {\n\t\tif (len === 4 || len === 5) {\n\t\t\tret = {\n\t\t\t\tr: 255 & map[str[1]] * 17,\n\t\t\t\tg: 255 & map[str[2]] * 17,\n\t\t\t\tb: 255 & map[str[3]] * 17,\n\t\t\t\ta: len === 5 ? map[str[4]] * 17 : 255\n\t\t\t};\n\t\t} else if (len === 7 || len === 9) {\n\t\t\tret = {\n\t\t\t\tr: map[str[1]] << 4 | map[str[2]],\n\t\t\t\tg: map[str[3]] << 4 | map[str[4]],\n\t\t\t\tb: map[str[5]] << 4 | map[str[6]],\n\t\t\t\ta: len === 9 ? (map[str[7]] << 4 | map[str[8]]) : 255\n\t\t\t};\n\t\t}\n\t}\n\treturn ret;\n}\nfunction hexString(v) {\n\tvar f = isShort(v) ? h1 : h2;\n\treturn v\n\t\t? '#' + f(v.r) + f(v.g) + f(v.b) + (v.a < 255 ? f(v.a) : '')\n\t\t: v;\n}\nfunction round(v) {\n\treturn v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n\treturn lim(round(v * 2.55), 0, 255);\n}\nfunction n2b(v) {\n\treturn lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n\treturn lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n\treturn lim(round(v * 100), 0, 100);\n}\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n\tconst m = RGB_RE.exec(str);\n\tlet a = 255;\n\tlet r, g, b;\n\tif (!m) {\n\t\treturn;\n\t}\n\tif (m[7] !== r) {\n\t\tconst v = +m[7];\n\t\ta = 255 & (m[8] ? p2b(v) : v * 255);\n\t}\n\tr = +m[1];\n\tg = +m[3];\n\tb = +m[5];\n\tr = 255 & (m[2] ? p2b(r) : r);\n\tg = 255 & (m[4] ? p2b(g) : g);\n\tb = 255 & (m[6] ? p2b(b) : b);\n\treturn {\n\t\tr: r,\n\t\tg: g,\n\t\tb: b,\n\t\ta: a\n\t};\n}\nfunction rgbString(v) {\n\treturn v && (\n\t\tv.a < 255\n\t\t\t? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n\t\t\t: `rgb(${v.r}, ${v.g}, ${v.b})`\n\t);\n}\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n\tconst a = s * Math.min(l, 1 - l);\n\tconst f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\treturn [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n\tconst f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n\treturn [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n\tconst rgb = hsl2rgbn(h, 1, 0.5);\n\tlet i;\n\tif (w + b > 1) {\n\t\ti = 1 / (w + b);\n\t\tw *= i;\n\t\tb *= i;\n\t}\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] *= 1 - w - b;\n\t\trgb[i] += w;\n\t}\n\treturn rgb;\n}\nfunction rgb2hsl(v) {\n\tconst range = 255;\n\tconst r = v.r / range;\n\tconst g = v.g / range;\n\tconst b = v.b / range;\n\tconst max = Math.max(r, g, b);\n\tconst min = Math.min(r, g, b);\n\tconst l = (max + min) / 2;\n\tlet h, s, d;\n\tif (max !== min) {\n\t\td = max - min;\n\t\ts = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\t\th = max === r\n\t\t\t? ((g - b) / d) + (g < b ? 6 : 0)\n\t\t\t: max === g\n\t\t\t\t? (b - r) / d + 2\n\t\t\t\t: (r - g) / d + 4;\n\t\th = h * 60 + 0.5;\n\t}\n\treturn [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n\treturn (\n\t\tArray.isArray(a)\n\t\t\t? f(a[0], a[1], a[2])\n\t\t\t: f(a, b, c)\n\t).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n\treturn calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n\treturn calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n\treturn calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n\treturn (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n\tconst m = HUE_RE.exec(str);\n\tlet a = 255;\n\tlet v;\n\tif (!m) {\n\t\treturn;\n\t}\n\tif (m[5] !== v) {\n\t\ta = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n\t}\n\tconst h = hue(+m[2]);\n\tconst p1 = +m[3] / 100;\n\tconst p2 = +m[4] / 100;\n\tif (m[1] === 'hwb') {\n\t\tv = hwb2rgb(h, p1, p2);\n\t} else if (m[1] === 'hsv') {\n\t\tv = hsv2rgb(h, p1, p2);\n\t} else {\n\t\tv = hsl2rgb(h, p1, p2);\n\t}\n\treturn {\n\t\tr: v[0],\n\t\tg: v[1],\n\t\tb: v[2],\n\t\ta: a\n\t};\n}\nfunction rotate(v, deg) {\n\tvar h = rgb2hsl(v);\n\th[0] = hue(h[0] + deg);\n\th = hsl2rgb(h);\n\tv.r = h[0];\n\tv.g = h[1];\n\tv.b = h[2];\n}\nfunction hslString(v) {\n\tif (!v) {\n\t\treturn;\n\t}\n\tconst a = rgb2hsl(v);\n\tconst h = a[0];\n\tconst s = n2p(a[1]);\n\tconst l = n2p(a[2]);\n\treturn v.a < 255\n\t\t? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n\t\t: `hsl(${h}, ${s}%, ${l}%)`;\n}\nconst map$1 = {\n\tx: 'dark',\n\tZ: 'light',\n\tY: 're',\n\tX: 'blu',\n\tW: 'gr',\n\tV: 'medium',\n\tU: 'slate',\n\tA: 'ee',\n\tT: 'ol',\n\tS: 'or',\n\tB: 'ra',\n\tC: 'lateg',\n\tD: 'ights',\n\tR: 'in',\n\tQ: 'turquois',\n\tE: 'hi',\n\tP: 'ro',\n\tO: 'al',\n\tN: 'le',\n\tM: 'de',\n\tL: 'yello',\n\tF: 'en',\n\tK: 'ch',\n\tG: 'arks',\n\tH: 'ea',\n\tI: 'ightg',\n\tJ: 'wh'\n};\nconst names = {\n\tOiceXe: 'f0f8ff',\n\tantiquewEte: 'faebd7',\n\taqua: 'ffff',\n\taquamarRe: '7fffd4',\n\tazuY: 'f0ffff',\n\tbeige: 'f5f5dc',\n\tbisque: 'ffe4c4',\n\tblack: '0',\n\tblanKedOmond: 'ffebcd',\n\tXe: 'ff',\n\tXeviTet: '8a2be2',\n\tbPwn: 'a52a2a',\n\tburlywood: 'deb887',\n\tcaMtXe: '5f9ea0',\n\tKartYuse: '7fff00',\n\tKocTate: 'd2691e',\n\tcSO: 'ff7f50',\n\tcSnflowerXe: '6495ed',\n\tcSnsilk: 'fff8dc',\n\tcrimson: 'dc143c',\n\tcyan: 'ffff',\n\txXe: '8b',\n\txcyan: '8b8b',\n\txgTMnPd: 'b8860b',\n\txWay: 'a9a9a9',\n\txgYF: '6400',\n\txgYy: 'a9a9a9',\n\txkhaki: 'bdb76b',\n\txmagFta: '8b008b',\n\txTivegYF: '556b2f',\n\txSange: 'ff8c00',\n\txScEd: '9932cc',\n\txYd: '8b0000',\n\txsOmon: 'e9967a',\n\txsHgYF: '8fbc8f',\n\txUXe: '483d8b',\n\txUWay: '2f4f4f',\n\txUgYy: '2f4f4f',\n\txQe: 'ced1',\n\txviTet: '9400d3',\n\tdAppRk: 'ff1493',\n\tdApskyXe: 'bfff',\n\tdimWay: '696969',\n\tdimgYy: '696969',\n\tdodgerXe: '1e90ff',\n\tfiYbrick: 'b22222',\n\tflSOwEte: 'fffaf0',\n\tfoYstWAn: '228b22',\n\tfuKsia: 'ff00ff',\n\tgaRsbSo: 'dcdcdc',\n\tghostwEte: 'f8f8ff',\n\tgTd: 'ffd700',\n\tgTMnPd: 'daa520',\n\tWay: '808080',\n\tgYF: '8000',\n\tgYFLw: 'adff2f',\n\tgYy: '808080',\n\thoneyMw: 'f0fff0',\n\thotpRk: 'ff69b4',\n\tRdianYd: 'cd5c5c',\n\tRdigo: '4b0082',\n\tivSy: 'fffff0',\n\tkhaki: 'f0e68c',\n\tlavFMr: 'e6e6fa',\n\tlavFMrXsh: 'fff0f5',\n\tlawngYF: '7cfc00',\n\tNmoncEffon: 'fffacd',\n\tZXe: 'add8e6',\n\tZcSO: 'f08080',\n\tZcyan: 'e0ffff',\n\tZgTMnPdLw: 'fafad2',\n\tZWay: 'd3d3d3',\n\tZgYF: '90ee90',\n\tZgYy: 'd3d3d3',\n\tZpRk: 'ffb6c1',\n\tZsOmon: 'ffa07a',\n\tZsHgYF: '20b2aa',\n\tZskyXe: '87cefa',\n\tZUWay: '778899',\n\tZUgYy: '778899',\n\tZstAlXe: 'b0c4de',\n\tZLw: 'ffffe0',\n\tlime: 'ff00',\n\tlimegYF: '32cd32',\n\tlRF: 'faf0e6',\n\tmagFta: 'ff00ff',\n\tmaPon: '800000',\n\tVaquamarRe: '66cdaa',\n\tVXe: 'cd',\n\tVScEd: 'ba55d3',\n\tVpurpN: '9370db',\n\tVsHgYF: '3cb371',\n\tVUXe: '7b68ee',\n\tVsprRggYF: 'fa9a',\n\tVQe: '48d1cc',\n\tVviTetYd: 'c71585',\n\tmidnightXe: '191970',\n\tmRtcYam: 'f5fffa',\n\tmistyPse: 'ffe4e1',\n\tmoccasR: 'ffe4b5',\n\tnavajowEte: 'ffdead',\n\tnavy: '80',\n\tTdlace: 'fdf5e6',\n\tTive: '808000',\n\tTivedBb: '6b8e23',\n\tSange: 'ffa500',\n\tSangeYd: 'ff4500',\n\tScEd: 'da70d6',\n\tpOegTMnPd: 'eee8aa',\n\tpOegYF: '98fb98',\n\tpOeQe: 'afeeee',\n\tpOeviTetYd: 'db7093',\n\tpapayawEp: 'ffefd5',\n\tpHKpuff: 'ffdab9',\n\tperu: 'cd853f',\n\tpRk: 'ffc0cb',\n\tplum: 'dda0dd',\n\tpowMrXe: 'b0e0e6',\n\tpurpN: '800080',\n\tYbeccapurpN: '663399',\n\tYd: 'ff0000',\n\tPsybrown: 'bc8f8f',\n\tPyOXe: '4169e1',\n\tsaddNbPwn: '8b4513',\n\tsOmon: 'fa8072',\n\tsandybPwn: 'f4a460',\n\tsHgYF: '2e8b57',\n\tsHshell: 'fff5ee',\n\tsiFna: 'a0522d',\n\tsilver: 'c0c0c0',\n\tskyXe: '87ceeb',\n\tUXe: '6a5acd',\n\tUWay: '708090',\n\tUgYy: '708090',\n\tsnow: 'fffafa',\n\tsprRggYF: 'ff7f',\n\tstAlXe: '4682b4',\n\ttan: 'd2b48c',\n\tteO: '8080',\n\ttEstN: 'd8bfd8',\n\ttomato: 'ff6347',\n\tQe: '40e0d0',\n\tviTet: 'ee82ee',\n\tJHt: 'f5deb3',\n\twEte: 'ffffff',\n\twEtesmoke: 'f5f5f5',\n\tLw: 'ffff00',\n\tLwgYF: '9acd32'\n};\nfunction unpack() {\n\tconst unpacked = {};\n\tconst keys = Object.keys(names);\n\tconst tkeys = Object.keys(map$1);\n\tlet i, j, k, ok, nk;\n\tfor (i = 0; i < keys.length; i++) {\n\t\tok = nk = keys[i];\n\t\tfor (j = 0; j < tkeys.length; j++) {\n\t\t\tk = tkeys[j];\n\t\t\tnk = nk.replace(k, map$1[k]);\n\t\t}\n\t\tk = parseInt(names[ok], 16);\n\t\tunpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n\t}\n\treturn unpacked;\n}\nlet names$1;\nfunction nameParse(str) {\n\tif (!names$1) {\n\t\tnames$1 = unpack();\n\t\tnames$1.transparent = [0, 0, 0, 0];\n\t}\n\tconst a = names$1[str.toLowerCase()];\n\treturn a && {\n\t\tr: a[0],\n\t\tg: a[1],\n\t\tb: a[2],\n\t\ta: a.length === 4 ? a[3] : 255\n\t};\n}\nfunction modHSL(v, i, ratio) {\n\tif (v) {\n\t\tlet tmp = rgb2hsl(v);\n\t\ttmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n\t\ttmp = hsl2rgb(tmp);\n\t\tv.r = tmp[0];\n\t\tv.g = tmp[1];\n\t\tv.b = tmp[2];\n\t}\n}\nfunction clone(v, proto) {\n\treturn v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n\tvar v = {r: 0, g: 0, b: 0, a: 255};\n\tif (Array.isArray(input)) {\n\t\tif (input.length >= 3) {\n\t\t\tv = {r: input[0], g: input[1], b: input[2], a: 255};\n\t\t\tif (input.length > 3) {\n\t\t\t\tv.a = n2b(input[3]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tv = clone(input, {r: 0, g: 0, b: 0, a: 1});\n\t\tv.a = n2b(v.a);\n\t}\n\treturn v;\n}\nfunction functionParse(str) {\n\tif (str.charAt(0) === 'r') {\n\t\treturn rgbParse(str);\n\t}\n\treturn hueParse(str);\n}\nclass Color {\n\tconstructor(input) {\n\t\tif (input instanceof Color) {\n\t\t\treturn input;\n\t\t}\n\t\tconst type = typeof input;\n\t\tlet v;\n\t\tif (type === 'object') {\n\t\t\tv = fromObject(input);\n\t\t} else if (type === 'string') {\n\t\t\tv = hexParse(input) || nameParse(input) || functionParse(input);\n\t\t}\n\t\tthis._rgb = v;\n\t\tthis._valid = !!v;\n\t}\n\tget valid() {\n\t\treturn this._valid;\n\t}\n\tget rgb() {\n\t\tvar v = clone(this._rgb);\n\t\tif (v) {\n\t\t\tv.a = b2n(v.a);\n\t\t}\n\t\treturn v;\n\t}\n\tset rgb(obj) {\n\t\tthis._rgb = fromObject(obj);\n\t}\n\trgbString() {\n\t\treturn this._valid ? rgbString(this._rgb) : this._rgb;\n\t}\n\thexString() {\n\t\treturn this._valid ? hexString(this._rgb) : this._rgb;\n\t}\n\thslString() {\n\t\treturn this._valid ? hslString(this._rgb) : this._rgb;\n\t}\n\tmix(color, weight) {\n\t\tconst me = this;\n\t\tif (color) {\n\t\t\tconst c1 = me.rgb;\n\t\t\tconst c2 = color.rgb;\n\t\t\tlet w2;\n\t\t\tconst p = weight === w2 ? 0.5 : weight;\n\t\t\tconst w = 2 * p - 1;\n\t\t\tconst a = c1.a - c2.a;\n\t\t\tconst w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\t\tw2 = 1 - w1;\n\t\t\tc1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n\t\t\tc1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n\t\t\tc1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n\t\t\tc1.a = p * c1.a + (1 - p) * c2.a;\n\t\t\tme.rgb = c1;\n\t\t}\n\t\treturn me;\n\t}\n\tclone() {\n\t\treturn new Color(this.rgb);\n\t}\n\talpha(a) {\n\t\tthis._rgb.a = n2b(a);\n\t\treturn this;\n\t}\n\tclearer(ratio) {\n\t\tconst rgb = this._rgb;\n\t\trgb.a *= 1 - ratio;\n\t\treturn this;\n\t}\n\tgreyscale() {\n\t\tconst rgb = this._rgb;\n\t\tconst val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n\t\trgb.r = rgb.g = rgb.b = val;\n\t\treturn this;\n\t}\n\topaquer(ratio) {\n\t\tconst rgb = this._rgb;\n\t\trgb.a *= 1 + ratio;\n\t\treturn this;\n\t}\n\tnegate() {\n\t\tconst v = this._rgb;\n\t\tv.r = 255 - v.r;\n\t\tv.g = 255 - v.g;\n\t\tv.b = 255 - v.b;\n\t\treturn this;\n\t}\n\tlighten(ratio) {\n\t\tmodHSL(this._rgb, 2, ratio);\n\t\treturn this;\n\t}\n\tdarken(ratio) {\n\t\tmodHSL(this._rgb, 2, -ratio);\n\t\treturn this;\n\t}\n\tsaturate(ratio) {\n\t\tmodHSL(this._rgb, 1, ratio);\n\t\treturn this;\n\t}\n\tdesaturate(ratio) {\n\t\tmodHSL(this._rgb, 1, -ratio);\n\t\treturn this;\n\t}\n\trotate(deg) {\n\t\trotate(this._rgb, deg);\n\t\treturn this;\n\t}\n}\nfunction index_esm(input) {\n\treturn new Color(input);\n}\n\nconst isPatternOrGradient = (value) => value instanceof CanvasGradient || value instanceof CanvasPattern;\nfunction color(value) {\n  return isPatternOrGradient(value) ? value : index_esm(value);\n}\nfunction getHoverColor(value) {\n  return isPatternOrGradient(value)\n    ? value\n    : index_esm(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\nfunction getScope$1(node, key) {\n  if (!key) {\n    return node;\n  }\n  const keys = key.split('.');\n  for (let i = 0, n = keys.length; i < n; ++i) {\n    const k = keys[i];\n    node = node[k] || (node[k] = Object.create(null));\n  }\n  return node;\n}\nfunction set(root, scope, values) {\n  if (typeof scope === 'string') {\n    return merge(getScope$1(root, scope), values);\n  }\n  return merge(getScope$1(root, ''), scope);\n}\nclass Defaults {\n  constructor(_descriptors) {\n    this.animation = undefined;\n    this.backgroundColor = 'rgba(0,0,0,0.1)';\n    this.borderColor = 'rgba(0,0,0,0.1)';\n    this.color = '#666';\n    this.datasets = {};\n    this.devicePixelRatio = (context) => context.chart.platform.getDevicePixelRatio();\n    this.elements = {};\n    this.events = [\n      'mousemove',\n      'mouseout',\n      'click',\n      'touchstart',\n      'touchmove'\n    ];\n    this.font = {\n      family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n      size: 12,\n      style: 'normal',\n      lineHeight: 1.2,\n      weight: null\n    };\n    this.hover = {};\n    this.hoverBackgroundColor = (ctx, options) => getHoverColor(options.backgroundColor);\n    this.hoverBorderColor = (ctx, options) => getHoverColor(options.borderColor);\n    this.hoverColor = (ctx, options) => getHoverColor(options.color);\n    this.indexAxis = 'x';\n    this.interaction = {\n      mode: 'nearest',\n      intersect: true\n    };\n    this.maintainAspectRatio = true;\n    this.onHover = null;\n    this.onClick = null;\n    this.parsing = true;\n    this.plugins = {};\n    this.responsive = true;\n    this.scale = undefined;\n    this.scales = {};\n    this.showLine = true;\n    this.describe(_descriptors);\n  }\n  set(scope, values) {\n    return set(this, scope, values);\n  }\n  get(scope) {\n    return getScope$1(this, scope);\n  }\n  describe(scope, values) {\n    return set(descriptors, scope, values);\n  }\n  override(scope, values) {\n    return set(overrides, scope, values);\n  }\n  route(scope, name, targetScope, targetName) {\n    const scopeObject = getScope$1(this, scope);\n    const targetScopeObject = getScope$1(this, targetScope);\n    const privateName = '_' + name;\n    Object.defineProperties(scopeObject, {\n      [privateName]: {\n        value: scopeObject[name],\n        writable: true\n      },\n      [name]: {\n        enumerable: true,\n        get() {\n          const local = this[privateName];\n          const target = targetScopeObject[targetName];\n          if (isObject(local)) {\n            return Object.assign({}, target, local);\n          }\n          return valueOrDefault(local, target);\n        },\n        set(value) {\n          this[privateName] = value;\n        }\n      }\n    });\n  }\n}\nvar defaults = new Defaults({\n  _scriptable: (name) => !name.startsWith('on'),\n  _indexable: (name) => name !== 'events',\n  hover: {\n    _fallback: 'interaction'\n  },\n  interaction: {\n    _scriptable: false,\n    _indexable: false,\n  }\n});\n\nfunction toFontString(font) {\n  if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n    return null;\n  }\n  return (font.style ? font.style + ' ' : '')\n\t\t+ (font.weight ? font.weight + ' ' : '')\n\t\t+ font.size + 'px '\n\t\t+ font.family;\n}\nfunction _measureText(ctx, data, gc, longest, string) {\n  let textWidth = data[string];\n  if (!textWidth) {\n    textWidth = data[string] = ctx.measureText(string).width;\n    gc.push(string);\n  }\n  if (textWidth > longest) {\n    longest = textWidth;\n  }\n  return longest;\n}\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n  cache = cache || {};\n  let data = cache.data = cache.data || {};\n  let gc = cache.garbageCollect = cache.garbageCollect || [];\n  if (cache.font !== font) {\n    data = cache.data = {};\n    gc = cache.garbageCollect = [];\n    cache.font = font;\n  }\n  ctx.save();\n  ctx.font = font;\n  let longest = 0;\n  const ilen = arrayOfThings.length;\n  let i, j, jlen, thing, nestedThing;\n  for (i = 0; i < ilen; i++) {\n    thing = arrayOfThings[i];\n    if (thing !== undefined && thing !== null && isArray(thing) !== true) {\n      longest = _measureText(ctx, data, gc, longest, thing);\n    } else if (isArray(thing)) {\n      for (j = 0, jlen = thing.length; j < jlen; j++) {\n        nestedThing = thing[j];\n        if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n          longest = _measureText(ctx, data, gc, longest, nestedThing);\n        }\n      }\n    }\n  }\n  ctx.restore();\n  const gcLen = gc.length / 2;\n  if (gcLen > arrayOfThings.length) {\n    for (i = 0; i < gcLen; i++) {\n      delete data[gc[i]];\n    }\n    gc.splice(0, gcLen);\n  }\n  return longest;\n}\nfunction _alignPixel(chart, pixel, width) {\n  const devicePixelRatio = chart.currentDevicePixelRatio;\n  const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n  return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\nfunction clearCanvas(canvas, ctx) {\n  ctx = ctx || canvas.getContext('2d');\n  ctx.save();\n  ctx.resetTransform();\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n  let type, xOffset, yOffset, size, cornerRadius;\n  const style = options.pointStyle;\n  const rotation = options.rotation;\n  const radius = options.radius;\n  let rad = (rotation || 0) * RAD_PER_DEG;\n  if (style && typeof style === 'object') {\n    type = style.toString();\n    if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.rotate(rad);\n      ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n      ctx.restore();\n      return;\n    }\n  }\n  if (isNaN(radius) || radius <= 0) {\n    return;\n  }\n  ctx.beginPath();\n  switch (style) {\n  default:\n    ctx.arc(x, y, radius, 0, TAU);\n    ctx.closePath();\n    break;\n  case 'triangle':\n    ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    rad += TWO_THIRDS_PI;\n    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    rad += TWO_THIRDS_PI;\n    ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);\n    ctx.closePath();\n    break;\n  case 'rectRounded':\n    cornerRadius = radius * 0.516;\n    size = radius - cornerRadius;\n    xOffset = Math.cos(rad + QUARTER_PI) * size;\n    yOffset = Math.sin(rad + QUARTER_PI) * size;\n    ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n    ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n    ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n    ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n    ctx.closePath();\n    break;\n  case 'rect':\n    if (!rotation) {\n      size = Math.SQRT1_2 * radius;\n      ctx.rect(x - size, y - size, 2 * size, 2 * size);\n      break;\n    }\n    rad += QUARTER_PI;\n  case 'rectRot':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    ctx.closePath();\n    break;\n  case 'crossRot':\n    rad += QUARTER_PI;\n  case 'cross':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    break;\n  case 'star':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    rad += QUARTER_PI;\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    ctx.moveTo(x + yOffset, y - xOffset);\n    ctx.lineTo(x - yOffset, y + xOffset);\n    break;\n  case 'line':\n    xOffset = Math.cos(rad) * radius;\n    yOffset = Math.sin(rad) * radius;\n    ctx.moveTo(x - xOffset, y - yOffset);\n    ctx.lineTo(x + xOffset, y + yOffset);\n    break;\n  case 'dash':\n    ctx.moveTo(x, y);\n    ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);\n    break;\n  }\n  ctx.fill();\n  if (options.borderWidth > 0) {\n    ctx.stroke();\n  }\n}\nfunction _isPointInArea(point, area, margin) {\n  margin = margin || 0.5;\n  return !area || (point && point.x > area.left - margin && point.x < area.right + margin &&\n\t\tpoint.y > area.top - margin && point.y < area.bottom + margin);\n}\nfunction clipArea(ctx, area) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n  ctx.clip();\n}\nfunction unclipArea(ctx) {\n  ctx.restore();\n}\nfunction _steppedLineTo(ctx, previous, target, flip, mode) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  if (mode === 'middle') {\n    const midpoint = (previous.x + target.x) / 2.0;\n    ctx.lineTo(midpoint, previous.y);\n    ctx.lineTo(midpoint, target.y);\n  } else if (mode === 'after' !== !!flip) {\n    ctx.lineTo(previous.x, target.y);\n  } else {\n    ctx.lineTo(target.x, previous.y);\n  }\n  ctx.lineTo(target.x, target.y);\n}\nfunction _bezierCurveTo(ctx, previous, target, flip) {\n  if (!previous) {\n    return ctx.lineTo(target.x, target.y);\n  }\n  ctx.bezierCurveTo(\n    flip ? previous.cp1x : previous.cp2x,\n    flip ? previous.cp1y : previous.cp2y,\n    flip ? target.cp2x : target.cp1x,\n    flip ? target.cp2y : target.cp1y,\n    target.x,\n    target.y);\n}\nfunction renderText(ctx, text, x, y, font, opts = {}) {\n  const lines = isArray(text) ? text : [text];\n  const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n  let i, line;\n  ctx.save();\n  ctx.font = font.string;\n  setRenderOpts(ctx, opts);\n  for (i = 0; i < lines.length; ++i) {\n    line = lines[i];\n    if (stroke) {\n      if (opts.strokeColor) {\n        ctx.strokeStyle = opts.strokeColor;\n      }\n      if (!isNullOrUndef(opts.strokeWidth)) {\n        ctx.lineWidth = opts.strokeWidth;\n      }\n      ctx.strokeText(line, x, y, opts.maxWidth);\n    }\n    ctx.fillText(line, x, y, opts.maxWidth);\n    decorateText(ctx, x, y, line, opts);\n    y += font.lineHeight;\n  }\n  ctx.restore();\n}\nfunction setRenderOpts(ctx, opts) {\n  if (opts.translation) {\n    ctx.translate(opts.translation[0], opts.translation[1]);\n  }\n  if (!isNullOrUndef(opts.rotation)) {\n    ctx.rotate(opts.rotation);\n  }\n  if (opts.color) {\n    ctx.fillStyle = opts.color;\n  }\n  if (opts.textAlign) {\n    ctx.textAlign = opts.textAlign;\n  }\n  if (opts.textBaseline) {\n    ctx.textBaseline = opts.textBaseline;\n  }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n  if (opts.strikethrough || opts.underline) {\n    const metrics = ctx.measureText(line);\n    const left = x - metrics.actualBoundingBoxLeft;\n    const right = x + metrics.actualBoundingBoxRight;\n    const top = y - metrics.actualBoundingBoxAscent;\n    const bottom = y + metrics.actualBoundingBoxDescent;\n    const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n    ctx.strokeStyle = ctx.fillStyle;\n    ctx.beginPath();\n    ctx.lineWidth = opts.decorationWidth || 2;\n    ctx.moveTo(left, yDecoration);\n    ctx.lineTo(right, yDecoration);\n    ctx.stroke();\n  }\n}\nfunction addRoundedRectPath(ctx, rect) {\n  const {x, y, w, h, radius} = rect;\n  ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, -HALF_PI, PI, true);\n  ctx.lineTo(x, y + h - radius.bottomLeft);\n  ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n  ctx.lineTo(x + w - radius.bottomRight, y + h);\n  ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n  ctx.lineTo(x + w, y + radius.topRight);\n  ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n  ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = new RegExp(/^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/);\nconst FONT_STYLE = new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);\nfunction toLineHeight(value, size) {\n  const matches = ('' + value).match(LINE_HEIGHT);\n  if (!matches || matches[1] === 'normal') {\n    return size * 1.2;\n  }\n  value = +matches[2];\n  switch (matches[3]) {\n  case 'px':\n    return value;\n  case '%':\n    value /= 100;\n    break;\n  }\n  return size * value;\n}\nconst numberOrZero = v => +v || 0;\nfunction _readValueToProps(value, props) {\n  const ret = {};\n  const objProps = isObject(props);\n  const keys = objProps ? Object.keys(props) : props;\n  const read = isObject(value)\n    ? objProps\n      ? prop => valueOrDefault(value[prop], value[props[prop]])\n      : prop => value[prop]\n    : () => value;\n  for (const prop of keys) {\n    ret[prop] = numberOrZero(read(prop));\n  }\n  return ret;\n}\nfunction toTRBL(value) {\n  return _readValueToProps(value, {top: 'y', right: 'x', bottom: 'y', left: 'x'});\n}\nfunction toTRBLCorners(value) {\n  return _readValueToProps(value, ['topLeft', 'topRight', 'bottomLeft', 'bottomRight']);\n}\nfunction toPadding(value) {\n  const obj = toTRBL(value);\n  obj.width = obj.left + obj.right;\n  obj.height = obj.top + obj.bottom;\n  return obj;\n}\nfunction toFont(options, fallback) {\n  options = options || {};\n  fallback = fallback || defaults.font;\n  let size = valueOrDefault(options.size, fallback.size);\n  if (typeof size === 'string') {\n    size = parseInt(size, 10);\n  }\n  let style = valueOrDefault(options.style, fallback.style);\n  if (style && !('' + style).match(FONT_STYLE)) {\n    console.warn('Invalid font style specified: \"' + style + '\"');\n    style = '';\n  }\n  const font = {\n    family: valueOrDefault(options.family, fallback.family),\n    lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n    size,\n    style,\n    weight: valueOrDefault(options.weight, fallback.weight),\n    string: ''\n  };\n  font.string = toFontString(font);\n  return font;\n}\nfunction resolve(inputs, context, index, info) {\n  let cacheable = true;\n  let i, ilen, value;\n  for (i = 0, ilen = inputs.length; i < ilen; ++i) {\n    value = inputs[i];\n    if (value === undefined) {\n      continue;\n    }\n    if (context !== undefined && typeof value === 'function') {\n      value = value(context);\n      cacheable = false;\n    }\n    if (index !== undefined && isArray(value)) {\n      value = value[index % value.length];\n      cacheable = false;\n    }\n    if (value !== undefined) {\n      if (info && !cacheable) {\n        info.cacheable = false;\n      }\n      return value;\n    }\n  }\n}\nfunction _addGrace(minmax, grace, beginAtZero) {\n  const {min, max} = minmax;\n  const change = toDimension(grace, (max - min) / 2);\n  const keepZero = (value, add) => beginAtZero && value === 0 ? 0 : value + add;\n  return {\n    min: keepZero(min, -Math.abs(change)),\n    max: keepZero(max, change)\n  };\n}\nfunction createContext(parentContext, context) {\n  return Object.assign(Object.create(parentContext), context);\n}\n\nfunction _lookup(table, value, cmp) {\n  cmp = cmp || ((index) => table[index] < value);\n  let hi = table.length - 1;\n  let lo = 0;\n  let mid;\n  while (hi - lo > 1) {\n    mid = (lo + hi) >> 1;\n    if (cmp(mid)) {\n      lo = mid;\n    } else {\n      hi = mid;\n    }\n  }\n  return {lo, hi};\n}\nconst _lookupByKey = (table, key, value) =>\n  _lookup(table, value, index => table[index][key] < value);\nconst _rlookupByKey = (table, key, value) =>\n  _lookup(table, value, index => table[index][key] >= value);\nfunction _filterBetween(values, min, max) {\n  let start = 0;\n  let end = values.length;\n  while (start < end && values[start] < min) {\n    start++;\n  }\n  while (end > start && values[end - 1] > max) {\n    end--;\n  }\n  return start > 0 || end < values.length\n    ? values.slice(start, end)\n    : values;\n}\nconst arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];\nfunction listenArrayEvents(array, listener) {\n  if (array._chartjs) {\n    array._chartjs.listeners.push(listener);\n    return;\n  }\n  Object.defineProperty(array, '_chartjs', {\n    configurable: true,\n    enumerable: false,\n    value: {\n      listeners: [listener]\n    }\n  });\n  arrayEvents.forEach((key) => {\n    const method = '_onData' + _capitalize(key);\n    const base = array[key];\n    Object.defineProperty(array, key, {\n      configurable: true,\n      enumerable: false,\n      value(...args) {\n        const res = base.apply(this, args);\n        array._chartjs.listeners.forEach((object) => {\n          if (typeof object[method] === 'function') {\n            object[method](...args);\n          }\n        });\n        return res;\n      }\n    });\n  });\n}\nfunction unlistenArrayEvents(array, listener) {\n  const stub = array._chartjs;\n  if (!stub) {\n    return;\n  }\n  const listeners = stub.listeners;\n  const index = listeners.indexOf(listener);\n  if (index !== -1) {\n    listeners.splice(index, 1);\n  }\n  if (listeners.length > 0) {\n    return;\n  }\n  arrayEvents.forEach((key) => {\n    delete array[key];\n  });\n  delete array._chartjs;\n}\nfunction _arrayUnique(items) {\n  const set = new Set();\n  let i, ilen;\n  for (i = 0, ilen = items.length; i < ilen; ++i) {\n    set.add(items[i]);\n  }\n  if (set.size === ilen) {\n    return items;\n  }\n  return Array.from(set);\n}\n\nfunction _createResolver(scopes, prefixes = [''], rootScopes = scopes, fallback, getTarget = () => scopes[0]) {\n  if (!defined(fallback)) {\n    fallback = _resolve('_fallback', scopes);\n  }\n  const cache = {\n    [Symbol.toStringTag]: 'Object',\n    _cacheable: true,\n    _scopes: scopes,\n    _rootScopes: rootScopes,\n    _fallback: fallback,\n    _getTarget: getTarget,\n    override: (scope) => _createResolver([scope, ...scopes], prefixes, rootScopes, fallback),\n  };\n  return new Proxy(cache, {\n    deleteProperty(target, prop) {\n      delete target[prop];\n      delete target._keys;\n      delete scopes[0][prop];\n      return true;\n    },\n    get(target, prop) {\n      return _cached(target, prop,\n        () => _resolveWithPrefixes(prop, prefixes, scopes, target));\n    },\n    getOwnPropertyDescriptor(target, prop) {\n      return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n    },\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(scopes[0]);\n    },\n    has(target, prop) {\n      return getKeysFromAllScopes(target).includes(prop);\n    },\n    ownKeys(target) {\n      return getKeysFromAllScopes(target);\n    },\n    set(target, prop, value) {\n      const storage = target._storage || (target._storage = getTarget());\n      target[prop] = storage[prop] = value;\n      delete target._keys;\n      return true;\n    }\n  });\n}\nfunction _attachContext(proxy, context, subProxy, descriptorDefaults) {\n  const cache = {\n    _cacheable: false,\n    _proxy: proxy,\n    _context: context,\n    _subProxy: subProxy,\n    _stack: new Set(),\n    _descriptors: _descriptors(proxy, descriptorDefaults),\n    setContext: (ctx) => _attachContext(proxy, ctx, subProxy, descriptorDefaults),\n    override: (scope) => _attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n  };\n  return new Proxy(cache, {\n    deleteProperty(target, prop) {\n      delete target[prop];\n      delete proxy[prop];\n      return true;\n    },\n    get(target, prop, receiver) {\n      return _cached(target, prop,\n        () => _resolveWithContext(target, prop, receiver));\n    },\n    getOwnPropertyDescriptor(target, prop) {\n      return target._descriptors.allKeys\n        ? Reflect.has(proxy, prop) ? {enumerable: true, configurable: true} : undefined\n        : Reflect.getOwnPropertyDescriptor(proxy, prop);\n    },\n    getPrototypeOf() {\n      return Reflect.getPrototypeOf(proxy);\n    },\n    has(target, prop) {\n      return Reflect.has(proxy, prop);\n    },\n    ownKeys() {\n      return Reflect.ownKeys(proxy);\n    },\n    set(target, prop, value) {\n      proxy[prop] = value;\n      delete target[prop];\n      return true;\n    }\n  });\n}\nfunction _descriptors(proxy, defaults = {scriptable: true, indexable: true}) {\n  const {_scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys} = proxy;\n  return {\n    allKeys: _allKeys,\n    scriptable: _scriptable,\n    indexable: _indexable,\n    isScriptable: isFunction(_scriptable) ? _scriptable : () => _scriptable,\n    isIndexable: isFunction(_indexable) ? _indexable : () => _indexable\n  };\n}\nconst readKey = (prefix, name) => prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value) => isObject(value) && prop !== 'adapters' &&\n  (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n  if (Object.prototype.hasOwnProperty.call(target, prop)) {\n    return target[prop];\n  }\n  const value = resolve();\n  target[prop] = value;\n  return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n  let value = _proxy[prop];\n  if (isFunction(value) && descriptors.isScriptable(prop)) {\n    value = _resolveScriptable(prop, value, target, receiver);\n  }\n  if (isArray(value) && value.length) {\n    value = _resolveArray(prop, value, target, descriptors.isIndexable);\n  }\n  if (needsSubResolver(prop, value)) {\n    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n  }\n  return value;\n}\nfunction _resolveScriptable(prop, value, target, receiver) {\n  const {_proxy, _context, _subProxy, _stack} = target;\n  if (_stack.has(prop)) {\n    throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n  }\n  _stack.add(prop);\n  value = value(_context, _subProxy || receiver);\n  _stack.delete(prop);\n  if (needsSubResolver(prop, value)) {\n    value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n  }\n  return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n  const {_proxy, _context, _subProxy, _descriptors: descriptors} = target;\n  if (defined(_context.index) && isIndexable(prop)) {\n    value = value[_context.index % value.length];\n  } else if (isObject(value[0])) {\n    const arr = value;\n    const scopes = _proxy._scopes.filter(s => s !== arr);\n    value = [];\n    for (const item of arr) {\n      const resolver = createSubResolver(scopes, _proxy, prop, item);\n      value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n    }\n  }\n  return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n  return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent) => key === true ? parent\n  : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback) {\n  for (const parent of parentScopes) {\n    const scope = getScope(key, parent);\n    if (scope) {\n      set.add(scope);\n      const fallback = resolveFallback(scope._fallback, key, scope);\n      if (defined(fallback) && fallback !== key && fallback !== parentFallback) {\n        return fallback;\n      }\n    } else if (scope === false && defined(parentFallback) && key !== parentFallback) {\n      return null;\n    }\n  }\n  return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n  const rootScopes = resolver._rootScopes;\n  const fallback = resolveFallback(resolver._fallback, prop, value);\n  const allScopes = [...parentScopes, ...rootScopes];\n  const set = new Set();\n  set.add(value);\n  let key = addScopesFromKey(set, allScopes, prop, fallback || prop);\n  if (key === null) {\n    return false;\n  }\n  if (defined(fallback) && fallback !== prop) {\n    key = addScopesFromKey(set, allScopes, fallback, key);\n    if (key === null) {\n      return false;\n    }\n  }\n  return _createResolver(Array.from(set), [''], rootScopes, fallback,\n    () => subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback) {\n  while (key) {\n    key = addScopes(set, allScopes, key, fallback);\n  }\n  return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n  const parent = resolver._getTarget();\n  if (!(prop in parent)) {\n    parent[prop] = {};\n  }\n  const target = parent[prop];\n  if (isArray(target) && isObject(value)) {\n    return value;\n  }\n  return target;\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n  let value;\n  for (const prefix of prefixes) {\n    value = _resolve(readKey(prefix, prop), scopes);\n    if (defined(value)) {\n      return needsSubResolver(prop, value)\n        ? createSubResolver(scopes, proxy, prop, value)\n        : value;\n    }\n  }\n}\nfunction _resolve(key, scopes) {\n  for (const scope of scopes) {\n    if (!scope) {\n      continue;\n    }\n    const value = scope[key];\n    if (defined(value)) {\n      return value;\n    }\n  }\n}\nfunction getKeysFromAllScopes(target) {\n  let keys = target._keys;\n  if (!keys) {\n    keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n  }\n  return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n  const set = new Set();\n  for (const scope of scopes) {\n    for (const key of Object.keys(scope).filter(k => !k.startsWith('_'))) {\n      set.add(key);\n    }\n  }\n  return Array.from(set);\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i) => i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis) => indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n  const previous = firstPoint.skip ? middlePoint : firstPoint;\n  const current = middlePoint;\n  const next = afterPoint.skip ? middlePoint : afterPoint;\n  const d01 = distanceBetweenPoints(current, previous);\n  const d12 = distanceBetweenPoints(next, current);\n  let s01 = d01 / (d01 + d12);\n  let s12 = d12 / (d01 + d12);\n  s01 = isNaN(s01) ? 0 : s01;\n  s12 = isNaN(s12) ? 0 : s12;\n  const fa = t * s01;\n  const fb = t * s12;\n  return {\n    previous: {\n      x: current.x - fa * (next.x - previous.x),\n      y: current.y - fa * (next.y - previous.y)\n    },\n    next: {\n      x: current.x + fb * (next.x - previous.x),\n      y: current.y + fb * (next.y - previous.y)\n    }\n  };\n}\nfunction monotoneAdjust(points, deltaK, mK) {\n  const pointsLen = points.length;\n  let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (let i = 0; i < pointsLen - 1; ++i) {\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent || !pointAfter) {\n      continue;\n    }\n    if (almostEquals(deltaK[i], 0, EPSILON)) {\n      mK[i] = mK[i + 1] = 0;\n      continue;\n    }\n    alphaK = mK[i] / deltaK[i];\n    betaK = mK[i + 1] / deltaK[i];\n    squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n    if (squaredMagnitude <= 9) {\n      continue;\n    }\n    tauK = 3 / Math.sqrt(squaredMagnitude);\n    mK[i] = alphaK * tauK * deltaK[i];\n    mK[i + 1] = betaK * tauK * deltaK[i];\n  }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  let delta, pointBefore, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (let i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n    const iPixel = pointCurrent[indexAxis];\n    const vPixel = pointCurrent[valueAxis];\n    if (pointBefore) {\n      delta = (iPixel - pointBefore[indexAxis]) / 3;\n      pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n      pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n    }\n    if (pointAfter) {\n      delta = (pointAfter[indexAxis] - iPixel) / 3;\n      pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n      pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n    }\n  }\n}\nfunction splineCurveMonotone(points, indexAxis = 'x') {\n  const valueAxis = getValueAxis(indexAxis);\n  const pointsLen = points.length;\n  const deltaK = Array(pointsLen).fill(0);\n  const mK = Array(pointsLen);\n  let i, pointBefore, pointCurrent;\n  let pointAfter = getPoint(points, 0);\n  for (i = 0; i < pointsLen; ++i) {\n    pointBefore = pointCurrent;\n    pointCurrent = pointAfter;\n    pointAfter = getPoint(points, i + 1);\n    if (!pointCurrent) {\n      continue;\n    }\n    if (pointAfter) {\n      const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n      deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n    }\n    mK[i] = !pointBefore ? deltaK[i]\n      : !pointAfter ? deltaK[i - 1]\n      : (sign(deltaK[i - 1]) !== sign(deltaK[i])) ? 0\n      : (deltaK[i - 1] + deltaK[i]) / 2;\n  }\n  monotoneAdjust(points, deltaK, mK);\n  monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n  return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n  let i, ilen, point, inArea, inAreaPrev;\n  let inAreaNext = _isPointInArea(points[0], area);\n  for (i = 0, ilen = points.length; i < ilen; ++i) {\n    inAreaPrev = inArea;\n    inArea = inAreaNext;\n    inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n    if (!inArea) {\n      continue;\n    }\n    point = points[i];\n    if (inAreaPrev) {\n      point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n      point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n    }\n    if (inAreaNext) {\n      point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n      point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n    }\n  }\n}\nfunction _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n  let i, ilen, point, controlPoints;\n  if (options.spanGaps) {\n    points = points.filter((pt) => !pt.skip);\n  }\n  if (options.cubicInterpolationMode === 'monotone') {\n    splineCurveMonotone(points, indexAxis);\n  } else {\n    let prev = loop ? points[points.length - 1] : points[0];\n    for (i = 0, ilen = points.length; i < ilen; ++i) {\n      point = points[i];\n      controlPoints = splineCurve(\n        prev,\n        point,\n        points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen],\n        options.tension\n      );\n      point.cp1x = controlPoints.previous.x;\n      point.cp1y = controlPoints.previous.y;\n      point.cp2x = controlPoints.next.x;\n      point.cp2y = controlPoints.next.y;\n      prev = point;\n    }\n  }\n  if (options.capBezierPoints) {\n    capBezierPoints(points, area);\n  }\n}\n\nfunction _isDomSupported() {\n  return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\nfunction _getParentNode(domNode) {\n  let parent = domNode.parentNode;\n  if (parent && parent.toString() === '[object ShadowRoot]') {\n    parent = parent.host;\n  }\n  return parent;\n}\nfunction parseMaxStyle(styleValue, node, parentProperty) {\n  let valueInPixels;\n  if (typeof styleValue === 'string') {\n    valueInPixels = parseInt(styleValue, 10);\n    if (styleValue.indexOf('%') !== -1) {\n      valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n    }\n  } else {\n    valueInPixels = styleValue;\n  }\n  return valueInPixels;\n}\nconst getComputedStyle = (element) => window.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n  return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = ['top', 'right', 'bottom', 'left'];\nfunction getPositionedStyle(styles, style, suffix) {\n  const result = {};\n  suffix = suffix ? '-' + suffix : '';\n  for (let i = 0; i < 4; i++) {\n    const pos = positions[i];\n    result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n  }\n  result.width = result.left + result.right;\n  result.height = result.top + result.bottom;\n  return result;\n}\nconst useOffsetPos = (x, y, target) => (x > 0 || y > 0) && (!target || !target.shadowRoot);\nfunction getCanvasPosition(evt, canvas) {\n  const e = evt.native || evt;\n  const touches = e.touches;\n  const source = touches && touches.length ? touches[0] : e;\n  const {offsetX, offsetY} = source;\n  let box = false;\n  let x, y;\n  if (useOffsetPos(offsetX, offsetY, e.target)) {\n    x = offsetX;\n    y = offsetY;\n  } else {\n    const rect = canvas.getBoundingClientRect();\n    x = source.clientX - rect.left;\n    y = source.clientY - rect.top;\n    box = true;\n  }\n  return {x, y, box};\n}\nfunction getRelativePosition(evt, chart) {\n  const {canvas, currentDevicePixelRatio} = chart;\n  const style = getComputedStyle(canvas);\n  const borderBox = style.boxSizing === 'border-box';\n  const paddings = getPositionedStyle(style, 'padding');\n  const borders = getPositionedStyle(style, 'border', 'width');\n  const {x, y, box} = getCanvasPosition(evt, canvas);\n  const xOffset = paddings.left + (box && borders.left);\n  const yOffset = paddings.top + (box && borders.top);\n  let {width, height} = chart;\n  if (borderBox) {\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  return {\n    x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n    y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n  };\n}\nfunction getContainerSize(canvas, width, height) {\n  let maxWidth, maxHeight;\n  if (width === undefined || height === undefined) {\n    const container = _getParentNode(canvas);\n    if (!container) {\n      width = canvas.clientWidth;\n      height = canvas.clientHeight;\n    } else {\n      const rect = container.getBoundingClientRect();\n      const containerStyle = getComputedStyle(container);\n      const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n      const containerPadding = getPositionedStyle(containerStyle, 'padding');\n      width = rect.width - containerPadding.width - containerBorder.width;\n      height = rect.height - containerPadding.height - containerBorder.height;\n      maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n      maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n    }\n  }\n  return {\n    width,\n    height,\n    maxWidth: maxWidth || INFINITY,\n    maxHeight: maxHeight || INFINITY\n  };\n}\nconst round1 = v => Math.round(v * 10) / 10;\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n  const style = getComputedStyle(canvas);\n  const margins = getPositionedStyle(style, 'margin');\n  const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n  const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n  const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n  let {width, height} = containerSize;\n  if (style.boxSizing === 'content-box') {\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const paddings = getPositionedStyle(style, 'padding');\n    width -= paddings.width + borders.width;\n    height -= paddings.height + borders.height;\n  }\n  width = Math.max(0, width - margins.width);\n  height = Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height - margins.height);\n  width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n  height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n  if (width && !height) {\n    height = round1(width / 2);\n  }\n  return {\n    width,\n    height\n  };\n}\nfunction retinaScale(chart, forceRatio, forceStyle) {\n  const pixelRatio = forceRatio || 1;\n  const deviceHeight = Math.floor(chart.height * pixelRatio);\n  const deviceWidth = Math.floor(chart.width * pixelRatio);\n  chart.height = deviceHeight / pixelRatio;\n  chart.width = deviceWidth / pixelRatio;\n  const canvas = chart.canvas;\n  if (canvas.style && (forceStyle || (!canvas.style.height && !canvas.style.width))) {\n    canvas.style.height = `${chart.height}px`;\n    canvas.style.width = `${chart.width}px`;\n  }\n  if (chart.currentDevicePixelRatio !== pixelRatio\n      || canvas.height !== deviceHeight\n      || canvas.width !== deviceWidth) {\n    chart.currentDevicePixelRatio = pixelRatio;\n    canvas.height = deviceHeight;\n    canvas.width = deviceWidth;\n    chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    return true;\n  }\n  return false;\n}\nconst supportsEventListenerOptions = (function() {\n  let passiveSupported = false;\n  try {\n    const options = {\n      get passive() {\n        passiveSupported = true;\n        return false;\n      }\n    };\n    window.addEventListener('test', null, options);\n    window.removeEventListener('test', null, options);\n  } catch (e) {\n  }\n  return passiveSupported;\n}());\nfunction readUsedSize(element, property) {\n  const value = getStyle(element, property);\n  const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n  return matches ? +matches[1] : undefined;\n}\n\nfunction _pointInLine(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: p1.y + t * (p2.y - p1.y)\n  };\n}\nfunction _steppedInterpolation(p1, p2, t, mode) {\n  return {\n    x: p1.x + t * (p2.x - p1.x),\n    y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y\n    : mode === 'after' ? t < 1 ? p1.y : p2.y\n    : t > 0 ? p2.y : p1.y\n  };\n}\nfunction _bezierInterpolation(p1, p2, t, mode) {\n  const cp1 = {x: p1.cp2x, y: p1.cp2y};\n  const cp2 = {x: p2.cp1x, y: p2.cp1y};\n  const a = _pointInLine(p1, cp1, t);\n  const b = _pointInLine(cp1, cp2, t);\n  const c = _pointInLine(cp2, p2, t);\n  const d = _pointInLine(a, b, t);\n  const e = _pointInLine(b, c, t);\n  return _pointInLine(d, e, t);\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n  options = options || {};\n  const cacheKey = locale + JSON.stringify(options);\n  let formatter = intlCache.get(cacheKey);\n  if (!formatter) {\n    formatter = new Intl.NumberFormat(locale, options);\n    intlCache.set(cacheKey, formatter);\n  }\n  return formatter;\n}\nfunction formatNumber(num, locale, options) {\n  return getNumberFormat(locale, options).format(num);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n  return {\n    x(x) {\n      return rectX + rectX + width - x;\n    },\n    setWidth(w) {\n      width = w;\n    },\n    textAlign(align) {\n      if (align === 'center') {\n        return align;\n      }\n      return align === 'right' ? 'left' : 'right';\n    },\n    xPlus(x, value) {\n      return x - value;\n    },\n    leftForLtr(x, itemWidth) {\n      return x - itemWidth;\n    },\n  };\n};\nconst getLeftToRightAdapter = function() {\n  return {\n    x(x) {\n      return x;\n    },\n    setWidth(w) {\n    },\n    textAlign(align) {\n      return align;\n    },\n    xPlus(x, value) {\n      return x + value;\n    },\n    leftForLtr(x, _itemWidth) {\n      return x;\n    },\n  };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n  return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n  let style, original;\n  if (direction === 'ltr' || direction === 'rtl') {\n    style = ctx.canvas.style;\n    original = [\n      style.getPropertyValue('direction'),\n      style.getPropertyPriority('direction'),\n    ];\n    style.setProperty('direction', direction, 'important');\n    ctx.prevTextDirection = original;\n  }\n}\nfunction restoreTextDirection(ctx, original) {\n  if (original !== undefined) {\n    delete ctx.prevTextDirection;\n    ctx.canvas.style.setProperty('direction', original[0], original[1]);\n  }\n}\n\nfunction propertyFn(property) {\n  if (property === 'angle') {\n    return {\n      between: _angleBetween,\n      compare: _angleDiff,\n      normalize: _normalizeAngle,\n    };\n  }\n  return {\n    between: _isBetween,\n    compare: (a, b) => a - b,\n    normalize: x => x\n  };\n}\nfunction normalizeSegment({start, end, count, loop, style}) {\n  return {\n    start: start % count,\n    end: end % count,\n    loop: loop && (end - start + 1) % count === 0,\n    style\n  };\n}\nfunction getSegment(segment, points, bounds) {\n  const {property, start: startBound, end: endBound} = bounds;\n  const {between, normalize} = propertyFn(property);\n  const count = points.length;\n  let {start, end, loop} = segment;\n  let i, ilen;\n  if (loop) {\n    start += count;\n    end += count;\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n        break;\n      }\n      start--;\n      end--;\n    }\n    start %= count;\n    end %= count;\n  }\n  if (end < start) {\n    end += count;\n  }\n  return {start, end, loop, style: segment.style};\n}\nfunction _boundSegment(segment, points, bounds) {\n  if (!bounds) {\n    return [segment];\n  }\n  const {property, start: startBound, end: endBound} = bounds;\n  const count = points.length;\n  const {compare, between, normalize} = propertyFn(property);\n  const {start, end, loop, style} = getSegment(segment, points, bounds);\n  const result = [];\n  let inside = false;\n  let subStart = null;\n  let value, point, prevValue;\n  const startIsBefore = () => between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n  const endIsBefore = () => compare(endBound, value) === 0 || between(endBound, prevValue, value);\n  const shouldStart = () => inside || startIsBefore();\n  const shouldStop = () => !inside || endIsBefore();\n  for (let i = start, prev = start; i <= end; ++i) {\n    point = points[i % count];\n    if (point.skip) {\n      continue;\n    }\n    value = normalize(point[property]);\n    if (value === prevValue) {\n      continue;\n    }\n    inside = between(value, startBound, endBound);\n    if (subStart === null && shouldStart()) {\n      subStart = compare(value, startBound) === 0 ? i : prev;\n    }\n    if (subStart !== null && shouldStop()) {\n      result.push(normalizeSegment({start: subStart, end: i, loop, count, style}));\n      subStart = null;\n    }\n    prev = i;\n    prevValue = value;\n  }\n  if (subStart !== null) {\n    result.push(normalizeSegment({start: subStart, end, loop, count, style}));\n  }\n  return result;\n}\nfunction _boundSegments(line, bounds) {\n  const result = [];\n  const segments = line.segments;\n  for (let i = 0; i < segments.length; i++) {\n    const sub = _boundSegment(segments[i], line.points, bounds);\n    if (sub.length) {\n      result.push(...sub);\n    }\n  }\n  return result;\n}\nfunction findStartAndEnd(points, count, loop, spanGaps) {\n  let start = 0;\n  let end = count - 1;\n  if (loop && !spanGaps) {\n    while (start < count && !points[start].skip) {\n      start++;\n    }\n  }\n  while (start < count && points[start].skip) {\n    start++;\n  }\n  start %= count;\n  if (loop) {\n    end += start;\n  }\n  while (end > start && points[end % count].skip) {\n    end--;\n  }\n  end %= count;\n  return {start, end};\n}\nfunction solidSegments(points, start, max, loop) {\n  const count = points.length;\n  const result = [];\n  let last = start;\n  let prev = points[start];\n  let end;\n  for (end = start + 1; end <= max; ++end) {\n    const cur = points[end % count];\n    if (cur.skip || cur.stop) {\n      if (!prev.skip) {\n        loop = false;\n        result.push({start: start % count, end: (end - 1) % count, loop});\n        start = last = cur.stop ? end : null;\n      }\n    } else {\n      last = end;\n      if (prev.skip) {\n        start = end;\n      }\n    }\n    prev = cur;\n  }\n  if (last !== null) {\n    result.push({start: start % count, end: last % count, loop});\n  }\n  return result;\n}\nfunction _computeSegments(line, segmentOptions) {\n  const points = line.points;\n  const spanGaps = line.options.spanGaps;\n  const count = points.length;\n  if (!count) {\n    return [];\n  }\n  const loop = !!line._loop;\n  const {start, end} = findStartAndEnd(points, count, loop, spanGaps);\n  if (spanGaps === true) {\n    return splitByStyles(line, [{start, end, loop}], points, segmentOptions);\n  }\n  const max = end < start ? end + count : end;\n  const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n  return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\nfunction splitByStyles(line, segments, points, segmentOptions) {\n  if (!segmentOptions || !segmentOptions.setContext || !points) {\n    return segments;\n  }\n  return doSplitByStyles(line, segments, points, segmentOptions);\n}\nfunction doSplitByStyles(line, segments, points, segmentOptions) {\n  const chartContext = line._chart.getContext();\n  const baseStyle = readStyle(line.options);\n  const {_datasetIndex: datasetIndex, options: {spanGaps}} = line;\n  const count = points.length;\n  const result = [];\n  let prevStyle = baseStyle;\n  let start = segments[0].start;\n  let i = start;\n  function addStyle(s, e, l, st) {\n    const dir = spanGaps ? -1 : 1;\n    if (s === e) {\n      return;\n    }\n    s += count;\n    while (points[s % count].skip) {\n      s -= dir;\n    }\n    while (points[e % count].skip) {\n      e += dir;\n    }\n    if (s % count !== e % count) {\n      result.push({start: s % count, end: e % count, loop: l, style: st});\n      prevStyle = st;\n      start = e % count;\n    }\n  }\n  for (const segment of segments) {\n    start = spanGaps ? start : segment.start;\n    let prev = points[start % count];\n    let style;\n    for (i = start + 1; i <= segment.end; i++) {\n      const pt = points[i % count];\n      style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n        type: 'segment',\n        p0: prev,\n        p1: pt,\n        p0DataIndex: (i - 1) % count,\n        p1DataIndex: i % count,\n        datasetIndex\n      })));\n      if (styleChanged(style, prevStyle)) {\n        addStyle(start, i - 1, segment.loop, prevStyle);\n      }\n      prev = pt;\n      prevStyle = style;\n    }\n    if (start < i - 1) {\n      addStyle(start, i - 1, segment.loop, prevStyle);\n    }\n  }\n  return result;\n}\nfunction readStyle(options) {\n  return {\n    backgroundColor: options.backgroundColor,\n    borderCapStyle: options.borderCapStyle,\n    borderDash: options.borderDash,\n    borderDashOffset: options.borderDashOffset,\n    borderJoinStyle: options.borderJoinStyle,\n    borderWidth: options.borderWidth,\n    borderColor: options.borderColor\n  };\n}\nfunction styleChanged(style, prevStyle) {\n  return prevStyle && JSON.stringify(style) !== JSON.stringify(prevStyle);\n}\n\nexport { _alignStartEnd as $, _rlookupByKey as A, toPadding as B, each as C, getMaximumSize as D, _getParentNode as E, readUsedSize as F, throttled as G, HALF_PI as H, supportsEventListenerOptions as I, _isDomSupported as J, log10 as K, _factorize as L, finiteOrDefault as M, callback as N, _addGrace as O, PI as P, toDegrees as Q, _measureText as R, _int16Range as S, TAU as T, _alignPixel as U, clipArea as V, renderText as W, unclipArea as X, toFont as Y, _toLeftRightCenter as Z, _arrayUnique as _, resolve as a, overrides as a0, merge as a1, _capitalize as a2, descriptors as a3, isFunction as a4, _attachContext as a5, _createResolver as a6, _descriptors as a7, mergeIf as a8, uid as a9, noop as aA, distanceBetweenPoints as aB, _setMinAndMaxByKey as aC, niceNum as aD, almostWhole as aE, almostEquals as aF, _decimalPlaces as aG, _longestText as aH, _filterBetween as aI, _lookup as aJ, getHoverColor as aK, clone$1 as aL, _merger as aM, _mergerIf as aN, _deprecated as aO, toFontString as aP, splineCurve as aQ, splineCurveMonotone as aR, getStyle as aS, fontString as aT, toLineHeight as aU, PITAU as aV, INFINITY as aW, RAD_PER_DEG as aX, QUARTER_PI as aY, TWO_THIRDS_PI as aZ, _angleDiff as a_, debounce as aa, retinaScale as ab, clearCanvas as ac, setsEqual as ad, _elementsEqual as ae, getAngleFromPoint as af, _isBetween as ag, _readValueToProps as ah, _updateBezierControlPoints as ai, _computeSegments as aj, _boundSegments as ak, _steppedInterpolation as al, _bezierInterpolation as am, _pointInLine as an, _steppedLineTo as ao, _bezierCurveTo as ap, drawPoint as aq, addRoundedRectPath as ar, toTRBL as as, toTRBLCorners as at, _boundSegment as au, _normalizeAngle as av, getRtlAdapter as aw, overrideTextDirection as ax, _textX as ay, restoreTextDirection as az, isArray as b, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, createContext as h, isObject as i, defined as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, isNumber as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _limitValue as w, _lookupByKey as x, getRelativePosition as y, _isPointInArea as z };\n","export default \"<div class=\\\"container\\\">\\r\\n    <h3>Top 5 tài liệu có lượt xem nhiều nhất</h3>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <canvas id=\\\"myChart\\\"></canvas>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<style>\\r\\n    #myChart{\\r\\n        width: 100% !important;\\r\\n        height: 500px !important;\\r\\n    }\\r\\n</style>\"","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {AuthGuard} from '../../helper/auth-guard';\r\nimport {ChartComponent} from './chart/chart.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ChartComponent,\r\n    canActivate: [AuthGuard]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ChartRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ChartRoutingModule } from './chart-routing.module';\r\nimport { ChartComponent } from './chart/chart.component';\r\nimport { PdfViewerModule } from 'ng2-pdf-viewer';\r\n@NgModule({\r\n  declarations: [ChartComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ChartRoutingModule,\r\n    PdfViewerModule\r\n  ]\r\n})\r\nexport class ChartModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkbWluaXN0cmF0b3IvY2hhcnQvY2hhcnQvY2hhcnQuY29tcG9uZW50LnNjc3MifQ== */\"","import {Component, OnInit} from '@angular/core';\r\nimport {Chart, registerables} from 'chart.js';\r\nimport {DocumentService} from 'src/app/service/document/document.service';\r\n\r\nChart.register(...registerables);\r\n\r\n@Component({\r\n  selector: 'app-chart',\r\n  templateUrl: './chart.component.html',\r\n  styleUrls: ['./chart.component.scss']\r\n})\r\nexport class ChartComponent implements OnInit {\r\n  constructor(\r\n    private documentService: DocumentService\r\n  ) {\r\n  }\r\n\r\n  listDocument = [];\r\n\r\n  ngOnInit() {\r\n    this.getDocument();\r\n  }\r\n\r\n  getDocument() {\r\n    this.documentService.getAll().subscribe(res => {\r\n      res = res.sort((a, b) => {\r\n        return b.visitNumber - a.visitNumber;\r\n      });\r\n      this.listDocument = res.slice(0, 5);\r\n      this.initChart();\r\n    });\r\n  }\r\n\r\n  initChart() {\r\n    const canvas = <HTMLCanvasElement> document.getElementById('myChart');\r\n    const ctx = canvas.getContext('2d');\r\n    var listLabel = this.listDocument.map(item => item.name);\r\n    var listData = this.listDocument.map(item => item.visitNumber);\r\n\r\n    const myChart = new Chart(ctx, {\r\n      type: 'bar',\r\n      data: {\r\n        labels: listLabel,\r\n        datasets: [{\r\n          label: 'Số lượt xem',\r\n          data: listData,\r\n          backgroundColor: [\r\n            'rgba(255, 99, 132, 0.2)'\r\n          ],\r\n          borderColor: [\r\n            'rgba(255, 99, 132, 1)'\r\n          ],\r\n          borderWidth: 1\r\n        }]\r\n      },\r\n      options: {\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"administrator-chart-chart-module-es5.js"}